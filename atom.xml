<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[丁俊斌的博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://nidesky.github.io/"/>
  <updated>2015-09-05T19:08:17.000Z</updated>
  <id>http://nidesky.github.io/</id>
  
  <author>
    <name><![CDATA[Omac]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[dingo/api]]></title>
    <link href="http://nidesky.github.io/2015/09/05/dingo-api/"/>
    <id>http://nidesky.github.io/2015/09/05/dingo-api/</id>
    <published>2015-09-05T03:07:14.000Z</published>
    <updated>2015-09-05T19:08:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="dingo/api_Wiki">dingo/api Wiki</h1><hr>
<p><code>Dingo Api</code> 包是为了给开发者提供一套可以轻松且快速开发出属于自己的 <code>API</code> 的工具。尽管这个包的目的是尽可能地灵活，但是它仍未能涵盖所有的情况，解决所有的问题。</p>
<h2 id="安装">安装</h2><p>前提环境:</p>
<ul>
<li>Laravel 5.1 + 或者 Lumen 5.1 +</li>
<li>PHP 5.5.9 +</li>
</ul>
<p>你首先要在你的项目中修改 <code>composer.json</code> 文件，然后运行 <code>composer update</code> 来安装最新版本的包。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"require"</span>: &#123;</span><br><span class="line">    <span class="string">"dingo/api"</span>: <span class="string">"1.0.*@dev"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者你可以在命令行中运行 <code>compsoer require</code> 命令。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require dingo/api:1.0.x@dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时的包仍处于开发阶段，因此它不是一个正式发布的版本。你需要在 <code>dev</code> 中添加 <code>minimum-stability</code>。</p>
</blockquote>
<p>一旦包安装成功后，接下来就看你使用的框架了。</p>
<h3 id="Laravel">Laravel</h3><p>打开 <code>config/app.php</code> , 并注册服务提供者(<code>Service Provider</code>)。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">    Dingo\Api\Provider\LaravelServiceProvider::class</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>如果你想修改包配置文件中的配置，那么你可以尝试通过 <code>Artisan command</code> 发布它：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider=<span class="string">"Dingo\Api\Provider\LaravelServiceProvider"</span></span><br></pre></td></tr></table></figure>
<h3 id="Lumen">Lumen</h3><p>打开 <code>bootstrap/app.php</code> , 然后注册服务提供者(<code>Service provider</code>)。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$app</span>-&gt;register(Dingo\Api\Provider\LumenServiceProvider::class);</span><br></pre></td></tr></table></figure>
<h3 id="Facades">Facades</h3><p>在包中有两个门面。你可以添加任何一个你想要的门面。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dingo\Api\Facade\API</span><br></pre></td></tr></table></figure>
<p>这是一个调度的门面，但是，他也在包中提供了辅助方法等方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dingo\Api\Facade\Route</span><br></pre></td></tr></table></figure>
<p>这是一个针对于 <code>API</code> 路由提供者和可被用于获取当前路由，请求，检查当前路由名称的一个门面。</p>
<hr>
<h2 id="配置">配置</h2><p>大部分的包可以通过预先配置来尽可能快的构建 <code>API</code>。你可以使用 <code>.env</code> 文件来配置大多数的包，然而一些更详细地配置需要你要么发布配置文件(<code>Laravel</code>)，或者配置 <code>bootstrap/app.php</code> (<code>Lumen</code>)。你也可以通过使用 <code>AppServiceProvider</code> 的 <code>boot</code> 方法。</p>
<p><strong>Important:</strong>如果你是用 <code>Laravel 5</code>，你必须发布你的配置文件或者一个服务提供商。不要使用 <code>bootstrap/app.php</code> 文件。</p>
<p>如果你使用 <code>Laravel</code> ，你可以通过 <code>Artisan command</code> 来发布配置文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider=&#34;Dingo\Api\Provider\LaravelServiceProvider&#34;</span><br></pre></td></tr></table></figure>
<p><strong><em>未完待续。。。</em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="dingo/api_Wiki">dingo/api Wiki</h1><hr>
<p><code>Dingo Api</code> 包是为了给开发者提供一套可以轻松且快速开发出属于自己的 <code>API</code> 的工具。尽管这个包的目的是尽可能地灵活，但]]>
    </summary>
    
      <category term="api" scheme="http://nidesky.github.io/tags/api/"/>
    
      <category term="dingo" scheme="http://nidesky.github.io/tags/dingo/"/>
    
      <category term="translation" scheme="http://nidesky.github.io/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面向对象的5个基本设计原则]]></title>
    <link href="http://nidesky.github.io/2015/09/05/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%845%E4%B8%AA%E5%9F%BA%E6%9C%AC%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://nidesky.github.io/2015/09/05/面向对象的5个基本设计原则/</id>
    <published>2015-09-04T16:54:22.000Z</published>
    <updated>2015-09-04T17:18:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="面向对象设计的5项基本原则">面向对象设计的5项基本原则</h1><hr>
<blockquote>
<p>原文出处： <a href="http://blog.csdn.net/luxiaoxun/article/details/8041885" target="_blank" rel="external">面向对象的5个基本设计原则</a></p>
</blockquote>
<h2 id="单一职责原则（Single-Resposibility_Principle）">单一职责原则（Single-Resposibility Principle）</h2><p>其核心思想为：一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而大大损伤其内聚性和耦合度。通常意义下的单一职责，就是指只有一种单一功能，不要为类实现过多的功能点，以保证实体只有一个引起它变化的原因。</p>
<p>专注，是一个人优良的品质；同样的，单一也是一个类的优良设计。交杂不清的职责将使得代码看起来特别别扭牵一发而动全身，有失美感和必然导致丑陋的系统错误风险。</p>
<h2 id="开放封闭原则（Open-Closed_principle）">开放封闭原则（Open-Closed principle）</h2><p>其核心思想是：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。开放封闭原则主要体现在两个方面：</p>
<ol>
<li>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</li>
<li>对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对其进行任何尝试的修改。</li>
</ol>
<p>实现开开放封闭原则的核心思想就是对抽象编程，而不对具体编程，因为抽象相对稳定。让类依赖于固定的抽象，所以修改就是封闭的；而通过面向对象的继承和多态机制，又可以实现对抽象类的继承，通过覆写其方法来改变固有行为，实现新的拓展方法，所以就是开放的。<br>    “需求总是变化”没有不变的软件，所以就需要用封闭开放原则来封闭变化满足需求，同时还能保持软件内部的封装体系稳定，不被需求的变化影响。</p>
<h2 id="李氏替换原则（Liskov-Substituion_Principle）">李氏替换原则（Liskov-Substituion Principle）</h2><p>其核心思想是：子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。在父类和子类的具体行为中，必须严格把握继承层次中的关系和特征，将基类替换为子类，程序的行为不会发生任何变化。同时，这一约束反过来则是不成立的，子类可以替换基类，但是基类不一定能替换子类。</p>
<p>Liskov替换原则，主要着眼于对抽象和多态建立在继承的基础上，因此只有遵循了Liskov替换原则，才能保证继承复用是可靠地。实现的方法是面向接口编程：将公共部分抽象为基类接口或抽象类，通过Extract Abstract Class，在子类中通过覆写父类的方法实现新的方式支持同样的职责。</p>
<p>Liskov替换原则是关于继承机制的设计原则，违反了Liskov替换原则就必然导致违反开放封闭原则。</p>
<p>Liskov替换原则能够保证系统具有良好的拓展性，同时实现基于多态的抽象机制，能够减少代码冗余，避免运行期的类型判别。</p>
<h2 id="依赖倒置原则（Dependecy-Inversion_Principle）">依赖倒置原则（Dependecy-Inversion Principle）</h2><p>其核心思想是：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。</p>
<p>我们知道，依赖一定会存在于类与类、模块与模块之间。当两个模块之间存在紧密的耦合关系时，最好的方法就是分离接口和实现：在依赖之间定义一个抽象的接口使得高层模块调用接口，而底层模块实现接口的定义，以此来有效控制耦合关系，达到依赖于抽象的设计目标。</p>
<p>抽象的稳定性决定了系统的稳定性，因为抽象是不变的，依赖于抽象是面向对象设计的精髓，也是依赖倒置原则的核心。</p>
<p>依赖于抽象是一个通用的原则，而某些时候依赖于细节则是在所难免的，必须权衡在抽象和具体之间的取舍，方法不是一层不变的。依赖于抽象，就是对接口编程，不要对实现编程。</p>
<h2 id="接口隔离原则（Interface-Segregation_Principle）">接口隔离原则（Interface-Segregation Principle）</h2><p>其核心思想是：使用多个小的专门的接口，而不要使用一个大的总接口。</p>
<p>具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染。</p>
<p>接口有效地将细节和抽象隔离，体现了对抽象编程的一切好处，接口隔离强调接口的单一性。而胖接口存在明显的弊端，会导致实现的类型必须完全实现接口的所有方法、属性等；而某些时候，实现类型并非需要所有的接口定义，在设计上这是“浪费”，而且在实施上这会带来潜在的问题，对胖接口的修改将导致一连串的客户端程序需要修改，有时候这是一种灾难。在这种情况下，将胖接口分解为多个特点的定制化方法，使得客户端仅仅依赖于它们的实际调用的方法，从而解除了客户端不会依赖于它们不用的方法。</p>
<p>分离的手段主要有以下两种：</p>
<ol>
<li>委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。</li>
<li>多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="面向对象设计的5项基本原则">面向对象设计的5项基本原则</h1><hr>
<blockquote>
<p>原文出处： <a href="http://blog.csdn.net/luxiaoxun/article/details/8041885" target=]]>
    </summary>
    
      <category term="OOP" scheme="http://nidesky.github.io/tags/OOP/"/>
    
      <category term="设计模式" scheme="http://nidesky.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[更新node和npm版本]]></title>
    <link href="http://nidesky.github.io/2015/08/31/%E6%9B%B4%E6%96%B0node%E5%92%8Cnpm%E7%89%88%E6%9C%AC/"/>
    <id>http://nidesky.github.io/2015/08/31/更新node和npm版本/</id>
    <published>2015-08-31T09:16:58.000Z</published>
    <updated>2015-08-31T09:22:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="更新_Npm_版本">更新 Npm 版本</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install npm -g</span><br></pre></td></tr></table></figure>
<h2 id="更新_Node_版本">更新 Node 版本</h2><h3 id="安装_n_模块">安装 n 模块</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g n</span><br></pre></td></tr></table></figure>
<h3 id="升级_nodejs">升级 nodejs</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#21319;&#32423; Nodejs &#21040;&#26368;&#26032;&#29256;&#26412;&#10;n stable&#10;&#10;# n &#21518;&#38754;&#20063;&#21487;&#20197;&#36319;&#38543;&#29256;&#26412;&#21495;&#65306;&#10;n v0.10.26&#10;&#10;# &#25110;&#10;v 0.10.26</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="更新_Npm_版本">更新 Npm 版本</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td ]]>
    </summary>
    
      <category term="node" scheme="http://nidesky.github.io/tags/node/"/>
    
      <category term="npm" scheme="http://nidesky.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Frameworks Are Not Tools]]></title>
    <link href="http://nidesky.github.io/2015/08/30/Frameworks-Are-Not-Tools/"/>
    <id>http://nidesky.github.io/2015/08/30/Frameworks-Are-Not-Tools/</id>
    <published>2015-08-30T14:18:46.000Z</published>
    <updated>2015-08-30T15:13:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="框架不是工具">框架不是工具</h1><blockquote>
<p>翻译自 <a href="http://paul-m-jones.com/archives/6175" target="_blank" rel="external">Frameworks Are Not Tools</a></p>
<p>Author <a href="http://paul-m-jones.com/" target="_blank" rel="external">@pmjones</a></p>
</blockquote>
<hr>
<p>我的一个朋友很久之前问我，为什么那些玩抢的伙计们对枪支非常痴迷。”他们只是工具”, 他说, “对我而言，我的工具则是一种超然的兴趣, 就像我做饭用的刀, 或者是在花园中使用的工具， 但他们不是我无休止比较和讨论的对象”。</p>
<p>我的回答是, 一支手枪或步枪，或者其他任何的现代武器, 或许并不只是个工具。它是一个机器。它是由所有协同工作的，相互关联相互依赖的活动部件组成的。（此外, 他是有炸药驱动的, 这使得他更有趣。）</p>
<p>我的朋友因此得到了一个结论。工具并不特别让人着迷，是因为它们并不复杂。但是机器最吸引人的地方就是它们是复杂的。</p>
<p>考虑到这点，我们必须认识到，框架并不是工具。框架是一个机器。每个人的代码都对应着相互关联相互依赖的活动部件。而机器吸引人的原因也就是框架吸引人的原因。</p>
<p>因此，下次有人说”要在工作中使用正确的工具”，并且提到了一个框架，我们可以认为这个提出使用框架建议的人可能并没有考虑到使用框架的正确方法。事实上，他们可能非常周全的考虑了某些方面，只是将”框架”作为他们所考虑的事情的一个简称。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="框架不是工具">框架不是工具</h1><blockquote>
<p>翻译自 <a href="http://paul-m-jones.com/archives/6175" target="_blank" rel="external">Frameworks Are]]>
    </summary>
    
      <category term="translation" scheme="http://nidesky.github.io/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[phpstorm 去除顶部的面包屑导航]]></title>
    <link href="http://nidesky.github.io/2015/08/30/phpstorm-%E5%8E%BB%E9%99%A4%E9%A1%B6%E9%83%A8%E7%9A%84%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA/"/>
    <id>http://nidesky.github.io/2015/08/30/phpstorm-去除顶部的面包屑导航/</id>
    <published>2015-08-30T10:37:38.000Z</published>
    <updated>2015-08-30T10:46:20.000Z</updated>
    <content type="html"><![CDATA[<p>用 <code>PHPStorm</code> 的时候，发现顶部的导航条实在是太别扭：</p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-4.png" alt=""></p>
<p>找了好久没有找到怎么去除掉这个面包屑导航，去 <code>Stackoverflow</code> 上逛一逛，一不小心就看见了。</p>
<p><code>Preferences -&gt; Editor -&gt; General -&gt; Appearance</code></p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-5.png" alt=""></p>
<h1 id="记得要重启项目才能生效">记得要重启项目才能生效</h1>]]></content>
    <summary type="html">
    <![CDATA[<p>用 <code>PHPStorm</code> 的时候，发现顶部的导航条实在是太别扭：</p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-4.png" alt=""></p>
<p>找了好久没]]>
    </summary>
    
      <category term="phpstorm" scheme="http://nidesky.github.io/tags/phpstorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[phpstorm 改变tabs 上文件名的颜色]]></title>
    <link href="http://nidesky.github.io/2015/08/30/phpstorm-%E6%94%B9%E5%8F%98tabs-%E4%B8%8A%E6%96%87%E4%BB%B6%E5%90%8D%E7%9A%84%E9%A2%9C%E8%89%B2/"/>
    <id>http://nidesky.github.io/2015/08/30/phpstorm-改变tabs-上文件名的颜色/</id>
    <published>2015-08-30T09:49:39.000Z</published>
    <updated>2015-08-30T10:01:00.000Z</updated>
    <content type="html"><![CDATA[<p>今天遇到了一个问题， 就是 <code>PHPStorm</code> 上的标签颜色太暗了：</p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-2.png" alt=""></p>
<p>然后找配置找了半天也没有发现，到 <code>Stackoverflow</code> 上一下就找到了:</p>
<p><code>Settings &gt; IDE Settings &gt; Editor &gt; Colors &amp; Fonts &gt; File Status.</code></p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-3.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天遇到了一个问题， 就是 <code>PHPStorm</code> 上的标签颜色太暗了：</p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-2.png" alt=""></p>
<p>然后]]>
    </summary>
    
      <category term="phpstorm" scheme="http://nidesky.github.io/tags/phpstorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[gulp-run clear 报错]]></title>
    <link href="http://nidesky.github.io/2015/08/30/gulp-run-clear-%E6%8A%A5%E9%94%99/"/>
    <id>http://nidesky.github.io/2015/08/30/gulp-run-clear-报错/</id>
    <published>2015-08-29T17:05:49.000Z</published>
    <updated>2015-08-29T17:07:28.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>引用地址 <a href="https://gist.github.com/laracasts/52a9f085408605a06400" target="_blank" rel="external">https://gist.github.com/laracasts/52a9f085408605a06400</a></p>
</blockquote>
<h3 id="1-_问题代码">1. 问题代码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&#39;gulp&#39;);&#10;var phpspec = require(&#39;gulp-phpspec&#39;);&#10;var run = require(&#39;gulp-run&#39;);&#10;var notify = require(&#39;gulp-notify&#39;);&#10;&#10;gulp.task(&#39;test&#39;, function() &#123;&#10;   gulp.src(&#39;spec/**/*.php&#39;)&#10;       .pipe(run(&#39;clear&#39;))&#10;       .pipe(phpspec(&#39;&#39;, &#123; notify: true &#125;))&#10;       .on(&#39;error&#39;, notify.onError(&#123;&#10;           title: &#39;Dangit&#39;,&#10;           message: &#39;Your tests failed!&#39;,&#10;           icon: __dirname + &#39;/fail.png&#39;&#10;       &#125;))&#10;       .pipe(notify(&#123;&#10;           title: &#39;Success&#39;,&#10;           message: &#39;All tests have returned green!&#39;&#10;       &#125;));&#10;&#125;);&#10;&#10;gulp.task(&#39;watch&#39;, function() &#123;&#10;   gulp.watch([&#39;spec/**/*.php&#39;, &#39;src/**/*.php&#39;], [&#39;test&#39;]);&#10;&#125;);&#10;&#10;gulp.task(&#39;default&#39;, [&#39;test&#39;, &#39;watch&#39;]);</span><br></pre></td></tr></table></figure>
<h3 id="2-_问题重现">2. 问题重现</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">events.js:85&#10;      throw er; // Unhandled &#39;error&#39; event&#10;            ^&#10;Error: write EPIPE&#10;    at exports._errnoException (util.js:746:11)&#10;    at WriteWrap.afterWrite (net.js:775:14)</span><br></pre></td></tr></table></figure>
<h3 id="3-_解决方案">3. 解决方案</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Change line 8 for this:&#10;.pipe(run(&#39;clear&#39;).exec())</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>引用地址 <a href="https://gist.github.com/laracasts/52a9f085408605a06400" target="_blank" rel="external">https://gist.github.com]]>
    </summary>
    
      <category term="gulp" scheme="http://nidesky.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laravel 5.1 开发扩展包]]></title>
    <link href="http://nidesky.github.io/2015/08/30/Laravel-5-1-%E5%BC%80%E5%8F%91%E6%89%A9%E5%B1%95%E5%8C%85/"/>
    <id>http://nidesky.github.io/2015/08/30/Laravel-5-1-开发扩展包/</id>
    <published>2015-08-29T16:58:11.000Z</published>
    <updated>2015-08-29T17:03:43.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_安装_pingpong/workbench">1. 安装 <code>pingpong/workbench</code></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require pingpong/workbench</span><br></pre></td></tr></table></figure>
<h3 id="2-_配置_pingpong/workbench">2. 配置 <code>pingpong/workbench</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 config/app.php 中的 providers 添加</span></span><br><span class="line">Pingpong\Workbench\WorkbenchServiceProvider</span><br></pre></td></tr></table></figure>
<p>运行命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish</span><br></pre></td></tr></table></figure></p>
<h3 id="3-_创建扩展包">3. 创建扩展包</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan workbench vendor/package&#10;php artisan workbench vendor/package --resources&#10;// php artisan workbench nidesky/sweet-alert</span><br></pre></td></tr></table></figure>
<h3 id="4-_引入命名空间">4. 引入命名空间</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"autoload"</span>: &#123;</span><br><span class="line">    <span class="string">"classmap"</span>: [</span><br><span class="line">        <span class="string">"database"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"psr-4"</span>: &#123;</span><br><span class="line">        <span class="string">"App\\"</span>: <span class="string">"app/"</span>,</span><br><span class="line">+       <span class="string">"Nidesky\\SweetAlert\\"</span>: <span class="string">"workbench/nidesky/sweet-alert/src/Nidesky/SweetAlert"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_安装_pingpong/workbench">1. 安装 <code>pingpong/workbench</code></h3><figure class="highlight"><table><tr><td class="gutter"><pre><sp]]>
    </summary>
    
      <category term="laravel" scheme="http://nidesky.github.io/tags/laravel/"/>
    
      <category term="packages" scheme="http://nidesky.github.io/tags/packages/"/>
    
      <category term="php" scheme="http://nidesky.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Centos 防火墙iptables 开启 3306端口]]></title>
    <link href="http://nidesky.github.io/2015/08/29/Centos-%E9%98%B2%E7%81%AB%E5%A2%99iptables-%E5%BC%80%E5%90%AF-3306%E7%AB%AF%E5%8F%A3/"/>
    <id>http://nidesky.github.io/2015/08/29/Centos-防火墙iptables-开启-3306端口/</id>
    <published>2015-08-29T15:38:06.000Z</published>
    <updated>2015-08-29T15:39:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_添加防火墙规则">1. 添加防火墙规则</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables&#10;&#10;# &#28155;&#21152;&#19979;&#38754;&#36825;&#34892;&#10;-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="2-_重启防火墙">2. 重启防火墙</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_添加防火墙规则">1. 添加防火墙规则</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><t]]>
    </summary>
    
  </entry>
  
</feed>
