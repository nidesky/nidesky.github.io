<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[丁俊斌的博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://nidesky.github.io/"/>
  <updated>2015-10-05T16:47:21.000Z</updated>
  <id>http://nidesky.github.io/</id>
  
  <author>
    <name><![CDATA[Omac]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[git笔记]]></title>
    <link href="http://nidesky.github.io/2015/10/05/git%E7%AC%94%E8%AE%B0/"/>
    <id>http://nidesky.github.io/2015/10/05/git笔记/</id>
    <published>2015-10-04T16:16:47.000Z</published>
    <updated>2015-10-05T16:47:21.000Z</updated>
    <content type="html"><![CDATA[<h1 id="git_操作笔记">git 操作笔记</h1><hr>
<h2 id="常见操作">常见操作</h2><h3 id="初始化操作">初始化操作</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#34;nidesky&#34;&#10;git config --global user.email &#34;nidesky@gmail.com&#34;&#10;&#10;# &#35774;&#32622;&#24573;&#30053;&#25991;&#20214;&#26435;&#38480;&#30340;&#20462;&#25913;&#10;git config core.filemode false</span><br></pre></td></tr></table></figure>
<h3 id="创建仓库">创建仓库</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#21019;&#24314;&#19968;&#20010;&#31354;&#30340;&#20179;&#24211;&#10;git init&#10;&#10;# &#25110;&#32773;&#20811;&#38534;&#19968;&#20010;&#32447;&#19978;&#24050;&#26377;&#30340;&#20179;&#24211;&#10;git clone https://github.com/symfony/symfony.git</span><br></pre></td></tr></table></figure>
<h3 id="添加文件">添加文件</h3><p>将 <code>工作区</code> 文件添加到 <code>暂存区(Staged)</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#28155;&#21152;&#19968;&#20010;&#25991;&#20214;&#10;git add README.md&#10;&#10;# &#28155;&#21152;&#22810;&#20010;&#25991;&#20214;&#10;git add file1 file2 file3&#10;&#10;# &#28155;&#21152;&#25152;&#26377;&#25991;&#20214;&#10;git add .&#10;# &#25110;&#32773;&#10;git add -A&#10;# &#25110;&#32773; &#10;git add --all</span><br></pre></td></tr></table></figure>
<h3 id="提交文件">提交文件</h3><p>将暂存区的文件提交到 <code>当前分支</code>（默认是 <code>master</code> 分支）。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#39;project init in 2015-10-05 22:55:27&#39;</span><br></pre></td></tr></table></figure>
<h3 id="查看历史记录">查看历史记录</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log&#10;&#10;# &#22914;&#26524;&#35273;&#24471;&#25552;&#20132;&#21382;&#21490;&#26174;&#31034;&#30340;&#24456;&#20081;&#65292;&#37027;&#20040;&#21487;&#20197;&#23558;&#27599;&#27425;&#25552;&#20132;&#21482;&#26174;&#31034;&#19968;&#34892;&#10;git log --pretty=oneline</span><br></pre></td></tr></table></figure>
<h3 id="版本回滚">版本回滚</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#22238;&#36864;&#21040;&#19978;&#19968;&#20010;&#29256;&#26412;&#10;git reset --hard HEAD^&#10;&#10;# &#20250;&#36864;&#21040;&#21069;100&#20010;&#29256;&#26412;&#10;git reset --hard HEAD~100&#10;&#10;# &#22238;&#28378;&#20043;&#21518;&#65292;git log &#20250;&#22833;&#21435;&#26368;&#26032;&#29256;&#26412;&#21644;&#22238;&#28378;&#29256;&#26412;&#20043;&#38388;&#30340;&#29256;&#26412;&#65292;&#20294;&#26159;&#20063;&#21487;&#20197;&#26597;&#21040;&#10;git reflog&#10;&#10;# &#22238;&#28378;&#21040;&#25351;&#23450;&#30340;&#29256;&#26412;&#21495;(&#21482;&#38656;&#35201;&#29256;&#26412;&#30340;&#21069;&#20960;&#20301;&#23601;&#21487;&#20197;)&#10;git reset --hard 1f05714</span><br></pre></td></tr></table></figure>
<h3 id="撤销工作区修改">撤销工作区修改</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- README.md</span><br></pre></td></tr></table></figure>
<p>有两种情况可以使用这种方法：</p>
<ol>
<li>README.md 修改后，还没有添加到暂存区，撤消后恢复成版本库中的状态。</li>
<li>已经放入到暂存区，又进行了修改，那么撤消后将恢复成加入暂存区之后的状态。</li>
</ol>
<h3 id="将本地仓库与远程仓库关联">将本地仓库与远程仓库关联</h3><p>新建本地仓库与远程关联</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init&#10;git add README.md&#10;git commit -m &#39;first commit&#39;&#10;git remote add origin https://github.com/symfony/symfony.git&#10;git push -u origin master</span><br></pre></td></tr></table></figure>
<p>已存在的本地仓库与远程关联</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/symfony/symfony.git&#10;git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="提交到远程仓库">提交到远程仓库</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#25552;&#20132;&#21040;&#36828;&#31243;&#30340; master &#20998;&#25903;&#10;git push origin master</span><br></pre></td></tr></table></figure>
<h3 id="创建分支和查看分支">创建分支和查看分支</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;# &#21019;&#24314; dev &#20998;&#25903;&#10;git branch dev&#10;&#10;# &#20999;&#25442;&#21040; dev &#20998;&#25903;&#10;git checkout dev&#10;&#10;# &#21019;&#24314;&#24182;&#20999;&#25442;&#21040; dev &#20998;&#25903;&#10;git checkout -b dev&#10;&#10;# &#26597;&#30475;&#24403;&#21069;&#20998;&#25903;&#10;git branch</span><br></pre></td></tr></table></figure>
<h3 id="合并分支">合并分支</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#20999;&#25442;&#22238; master &#20998;&#25903;&#10;git checkout master&#10;&#10;# &#21512;&#24182; dev &#20998;&#25903;&#21040; master&#10;git merge dev</span><br></pre></td></tr></table></figure>
<h3 id="删除分支">删除分支</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure>
<p>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。这样我们就可以合并分支后，在主分支保留开发分支的版本信息。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m &#34;&#21512;&#24182;&#27880;&#37322;&#34; dev</span><br></pre></td></tr></table></figure>
<h3 id="bug_分支">bug 分支</h3><p>在开发中经常会遇到，我们正在当前分支开发一个功能，但突然有个 bug 急需需改，但是我们又不想提交，这时 git 为我们提供了一个 stash 的功能，可以把当前的工作现场隐藏起来，等到以后恢复现场可以继续工作。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#38544;&#34255;&#24403;&#21069;&#24037;&#20316;&#29616;&#22330;&#10;git stash &#10;&#10;# &#26597;&#30475;&#20998;&#25903;&#29366;&#24577;, &#20250;&#21457;&#29616;&#26159;&#24178;&#20928;&#30340;&#10;git status &#10;&#10;# &#39318;&#20808;&#30830;&#23450;&#26159;&#22312;&#21738;&#20010;&#20998;&#25903;&#19978;&#20462;&#22797; bug&#65292; &#27604;&#22914;&#35828;&#22312; master&#65292;&#37027;&#20040;&#25105;&#20204;&#22312; master &#19978;&#24314;&#31435;&#19968;&#20010; bug &#20998;&#25903;&#12290;&#10;git checkout -b issue-404&#10;&#10;# &#20462;&#22797;&#25991;&#20214;&#24182;&#25552;&#20132;&#25991;&#20214;&#12290;&#12290;&#12290;&#10;&#10;# &#20999;&#25442;&#21040; master, &#23436;&#25104;&#21512;&#24182;&#65292;&#21024;&#38500; issue-404 &#20998;&#25903;&#12290;&#10;git checkout master&#10;git merge --no-ff -m &#34;merge bug fix 404&#34; issue-404&#10;git branch -d issue-404&#10;&#10;# &#28982;&#21518;&#22238;&#21040; dev &#20998;&#25903;&#65292;&#26597;&#30475;&#20998;&#25903;&#29366;&#24577;&#65292;&#21457;&#29616;&#26159;&#24178;&#20928;&#30340;&#10;git checkout dev&#10;git status&#10;&#10;# &#29616;&#22312;&#25105;&#20204;&#21435;&#24674;&#22797;&#29616;&#22330;&#10;# &#39318;&#20808;&#26597;&#30475;&#24037;&#20316;&#29616;&#22330;&#30340;&#21015;&#34920;&#10;git stash list&#10;&#10;# &#35201;&#24674;&#22797;&#24037;&#20316;&#29616;&#22330;&#65292;&#21487;&#20197;&#20351;&#29992;&#22914;&#19979;2&#20010;&#26041;&#27861;&#65306;&#10;# 1. git stash apply&#24674;&#22797;&#65292;&#24674;&#22797;&#21518;&#65292;stash&#20869;&#23481;&#24182;&#19981;&#21024;&#38500;&#65292;&#20320;&#38656;&#35201;&#20351;&#29992;&#21629;&#20196;git stash drop&#26469;&#21024;&#38500;&#12290;&#10;git stash apply&#10;git stash drop&#10;&#10;# 2. &#21478;&#19968;&#31181;&#26041;&#24335;&#26159;&#20351;&#29992;git stash pop,&#24674;&#22797;&#30340;&#21516;&#26102;&#25226;stash&#20869;&#23481;&#20063;&#21024;&#38500;&#20102;&#12290;&#10;git stash pop</span><br></pre></td></tr></table></figure>
<h3 id="多人协作">多人协作</h3><h4 id="查看远程库信息。">查看远程库信息。</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#26597;&#30475;&#36828;&#31243;&#24211;&#20449;&#24687;&#10;git remote&#10;&#10;# &#20135;&#30475;&#36828;&#31243;&#24211;&#30340;&#35814;&#32454;&#20449;&#24687;&#10;git remote -v</span><br></pre></td></tr></table></figure>
<h4 id="推送分支">推送分支</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#25512;&#36865; dev &#20998;&#25903;&#10;git push origin dev</span><br></pre></td></tr></table></figure>
<h4 id="抓取远程分支">抓取远程分支</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#25235;&#21462;&#36828;&#31243;&#30340; dev&#10;git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>
<h2 id="备忘">备忘</h2><h3 id="删除远程分支">删除远程分支</h3><p>查看所有分支。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<p>删除远程分支 <code>demo</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r -d origin/demo&#10;git push origin :demo</span><br></pre></td></tr></table></figure>
<h3 id="git_fetch_和_git_pull_区别">git fetch 和 git pull 区别</h3><p><code>git fetch</code>: 相当于从远程获取最新版本到本地，不会自动 <code>merge</code>。</p>
<p><code>git pull</code>: 会从远程获取最新版本并 <code>merge</code> 到本地。相当于：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master&#10;git merge origin/master</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="git_操作笔记">git 操作笔记</h1><hr>
<h2 id="常见操作">常见操作</h2><h3 id="初始化操作">初始化操作</h3><figure class="highlight"><table><tr><td class="gutter">]]>
    </summary>
    
      <category term="git" scheme="http://nidesky.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[让程序员更有干劲的10个技能]]></title>
    <link href="http://nidesky.github.io/2015/10/03/%E8%AE%A9%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9B%B4%E6%9C%89%E5%B9%B2%E5%8A%B2%E7%9A%8410%E4%B8%AA%E6%8A%80%E8%83%BD/"/>
    <id>http://nidesky.github.io/2015/10/03/让程序员更有干劲的10个技能/</id>
    <published>2015-10-03T15:47:09.000Z</published>
    <updated>2015-10-03T15:55:50.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>转自: <a href="http://codecloud.net/10-ways-to-stay-motivated-as-a-web-designer-5890.html" target="_blank" rel="external">让程序员更有干劲的10个技能</a><br><br>原文: <a href="http://designpotato.com/10-ways-to-stay-motivated-as-a-web-designer?rel=wkee" target="_blank" rel="external">10 Ways to stay Motivated as a Web Designer</a></p>
</blockquote>
<h2 id="1-不要生活里只有工作">1.不要生活里只有工作</h2><p>每当工作的时候一定要清楚的明白自己不是让人摆布的机器人，你除了工作还应该有很多业余生活，更重要的还有休息。休息好是做任何事的一个开始，应合理的制作一个工作表，不要做无用功，有些事该拒绝的还是要拒绝的。这将会保证你的工作质量。<br>当然还有一点就是千万不要有拖延的习惯，这是一定要杜绝的，这样可以避免因拖延需要加班。</p>
<h2 id="2-要学会适当妥协">2.要学会适当妥协</h2><p>人们一般都是不喜欢认输或妥协的，这种态度往往会对我们的进步有所阻碍。适当的妥协是对我们有好处的。<br>很多时候不要太和自己过不去，除了工作以外你可以有很多的事情做，如果已经有自己的家庭，就应该抽出些时间陪伴家人，这也是你保持热情和积极的言主要来源，若你还是单身，那么你就更应该抽时间<br>去约个会相个亲了。不能总是把自己逼的太紧了，工作更是如此，劳逸结合是最好不过了。</p>
<h2 id="3-工作中拒绝打搅">3.工作中拒绝打搅</h2><p>工作中就要一心一意的做事，拒绝一切刷微博刷微信的行为。如果你一旦开始了这种行为，那么就有可能占据你很大的一部分时间，这样会打乱你的工作积极性，更会打乱你的思维。所以应该在工作中屏蔽这些工具。</p>
<h2 id="4-工作环境可以做些调整">4.工作环境可以做些调整</h2><p>总是在同一个地方和环境下工作人容疲倦，所以如果可以的话，你可以带上你的笔记本到咖啡店或是图书馆工作也是一个不错的选择，换一个不同的工作地点这样可能会让你更有热情和动力。</p>
<h2 id="5-要学会享受工作">5.要学会享受工作</h2><p>把工作当成乐趣享受，可以在上面花点心思和创意，让我们的成果更具有意义，最好能让其他人一起加进来，独乐乐不如众乐乐。这也是让一个人有更好的热情的方法。</p>
<h2 id="6-讲究饮食">6.讲究饮食</h2><p>工作之余饮食也是很重要的。当你缺少能量的时候不防放下工作去吃顿美餐，也许当你吃美喝足再回来工作时你会发现你的能量全部都回来了。</p>
<h2 id="7-释放压力">7.释放压力</h2><p>每个人都说说需要宣泄压力，适时释放压力也能受益匪浅。饱受压力的摧残将导致我们的积极性降低。而简单的一句“我能行”将大大提高士气。这句话对我来说就像魔法中的咒语一样神奇，不是开玩笑，一般人我可不告诉他。</p>
<h2 id="8-随时跟进">8.随时跟进</h2><p>如果一个项目做一段时间之后，常常会忘记跟进，有时会觉得对于什么时候完工就没了信心，这就大大不妙了。所以，在任何时候，都应该留意整体进度随时跟进。</p>
<h2 id="9-多和同事们一起研讨工作">9.多和同事们一起研讨工作</h2><p>在工作当中多和伙伴们一起探讨工作上的问题，在那么多的同事中他的的一些意见和想法一定会对你有很多的帮助。<br>当然和他们在探讨上不只是有工作，这样可以有很多愉快的交流，也会说到你们相同的爱好时的那份兴奋，这不但能提高你的工作热情，还会让你重温当初为什么选择Web设计这份工作的初衷。</p>
<h2 id="10-一定要相信，每天都是新的开始">10.一定要相信，每天都是新的开始</h2><p>俗话说：“十有八九不顺”。所以是人就有不顺的事情，但千万不可轻言放弃。一定要相信，每天都是新的开始，成功或是失败完全取决于你是如何选择。人要学会在错误中学习，不要让任何事情打垮自己。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>转自: <a href="http://codecloud.net/10-ways-to-stay-motivated-as-a-web-designer-5890.html" target="_blank" rel="external">让程序员]]>
    </summary>
    
      <category term="life" scheme="http://nidesky.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[dingo/api]]></title>
    <link href="http://nidesky.github.io/2015/09/05/dingo-api/"/>
    <id>http://nidesky.github.io/2015/09/05/dingo-api/</id>
    <published>2015-09-05T03:07:14.000Z</published>
    <updated>2015-10-13T16:59:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="dingo/api_wiki_(未校正)"><a href="https://github.com/dingo/api/wiki" target="_blank" rel="external">dingo/api wiki</a> (未校正)</h1><hr>
<p><code>Dingo Api</code> 包是为了给开发者提供一套可以轻松且快速开发出属于自己的 <code>API</code> 的工具。尽管这个包的目的是尽可能地灵活，但是它仍未能涵盖所有的情况，解决所有的问题。</p>
<h2 id="安装">安装</h2><p>前提环境:</p>
<ul>
<li>Laravel 5.1 + 或者 Lumen 5.1 +</li>
<li>PHP 5.5.9 +</li>
</ul>
<p>你首先要在你的项目中修改 <code>composer.json</code> 文件，然后运行 <code>composer update</code> 来安装最新版本的包。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"require"</span>: &#123;</span><br><span class="line">    <span class="string">"dingo/api"</span>: <span class="string">"1.0.*@dev"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者你可以在命令行中运行 <code>compsoer require</code> 命令。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require dingo/api:1.0.x@dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时的包仍处于开发阶段，因此它不是一个正式发布的版本。你需要在 <code>dev</code> 中添加 <code>minimum-stability</code>。</p>
</blockquote>
<p>一旦包安装成功后，接下来就看你使用的框架了。</p>
<h3 id="Laravel">Laravel</h3><p>打开 <code>config/app.php</code> , 并注册服务提供者(<code>Service Provider</code>)。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">    Dingo\Api\Provider\LaravelServiceProvider::class</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>如果你想修改包配置文件中的配置，那么你可以尝试通过 <code>Artisan command</code> 发布它：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider=<span class="string">"Dingo\Api\Provider\LaravelServiceProvider"</span></span><br></pre></td></tr></table></figure>
<h3 id="Lumen">Lumen</h3><p>打开 <code>bootstrap/app.php</code> , 然后注册服务提供者(<code>Service provider</code>)。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$app</span>-&gt;register(Dingo\Api\Provider\LumenServiceProvider::class);</span><br></pre></td></tr></table></figure>
<h3 id="Facades">Facades</h3><p>在包中有两个门面。你可以添加任何一个你想要的门面。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dingo\Api\Facade\API</span><br></pre></td></tr></table></figure>
<p>这是一个调度的门面，但是，他也在包中提供了辅助方法等方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dingo\Api\Facade\Route</span><br></pre></td></tr></table></figure>
<p>这是一个针对于 <code>API</code> 路由提供者和可被用于获取当前路由，请求，检查当前路由名称的一个门面。</p>
<hr>
<h2 id="配置">配置</h2><p>大部分的包可以通过预先配置来尽可能快的构建 <code>API</code>。你可以使用 <code>.env</code> 文件来配置大多数的包，然而一些更详细地配置需要你要么发布配置文件(<code>Laravel</code>)，或者配置 <code>bootstrap/app.php</code> (<code>Lumen</code>)。你也可以通过使用 <code>AppServiceProvider</code> 的 <code>boot</code> 方法。</p>
<p><strong>Important:</strong>如果你是用 <code>Laravel 5</code>，你必须发布你的配置文件或者一个服务提供商。不要使用 <code>bootstrap/app.php</code> 文件。</p>
<p>如果你使用 <code>Laravel</code> ，你可以通过 <code>Artisan command</code> 来发布配置文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider=&#34;Dingo\Api\Provider\LaravelServiceProvider&#34;</span><br></pre></td></tr></table></figure>
<h3 id="标准树_(Standards_Tree)">标准树 (<code>Standards Tree</code>)</h3><p>有三种不同的树: <code>x</code> , <code>prs</code> 和 <code>vnd</code> 。如何使用标准树取决于你正在开发的项目。</p>
<ul>
<li>未注册树(<code>x</code>)主要用于局部和私有的环境。</li>
<li>个人树(<code>prs</code>)主要用户不是商业部署的环境。</li>
<li>厂商树(<code>vnd</code>)主要用于公开部署的环境。</li>
</ul>
<blockquote>
<p>使用个人树或者厂商树在技术上意味着 <code>IANA</code>。</p>
</blockquote>
<p>你可以在你的 <code>.env</code> 文件里配置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_STANDARDS_TREE=vnd</span><br></pre></td></tr></table></figure></p>
<h3 id="子类型_(Subtype)">子类型 (<code>Subtype</code>)</h3><p>你的子类型通常是你的应用或项目全部小写的简称。<br>你可以在你的 <code>.env</code> 文件里配置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_SUBTYPE=myapp</span><br></pre></td></tr></table></figure></p>
<h3 id="前缀和子域名_(Prefixes_and_Subdomains)">前缀和子域名 (<code>Prefixes and Subdomains</code>)</h3><p>如果你曾经开发过 <code>API</code>， 那么你一定会知道大部分的 <code>API</code> 不是放在一个子域名就是带有前缀。一个前缀或者子域名是必须的，但只需要其中之一即可。避免将版本号作为前缀或子域版本通过 <code>Accept</code> 报头处理。</p>
<p>你可以在你的 <code>.env</code> 文件里配置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_PREFIX=api</span><br></pre></td></tr></table></figure></p>
<p>或者可以使用一个子域名。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_DOMAIN=api.myapp.com</span><br></pre></td></tr></table></figure></p>
<h3 id="版本_(Version)">版本 (<code>Version</code>)</h3><p>这个版本是你的 <code>API</code> 的默认版本，它被用在每当版本没有提供几种情况下的回退。这个版本也会在生成 <code>API</code> 文档被当成默认的版本。</p>
<p>你可以在你的 <code>.env</code> 文件里配置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_VERSION=v1</span><br></pre></td></tr></table></figure></p>
<h3 id="名称_(Name)">名称 (<code>Name</code>)</h3><p>这个名字只会被用在当你使用 <code>API Blueprint</code> 命令生成文档的时候。这个名字会被用作生成文档的默认名称。</p>
<p>你可以在你的 <code>.env</code> 文件里配置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_NAME=My API</span><br></pre></td></tr></table></figure></p>
<h3 id="条件请求_(Conditional_Requests)">条件请求 (<code>Conditional Requests</code>)</h3><p>条件请求默认开启，因为它会利用缓存功能在客户端可以缓存 <code>API</code> 请求的时候。<br>你可以在你的 <code>.env</code> 文件里配置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_CONDITIONAL_REQUEST=<span class="keyword">false</span></span><br></pre></td></tr></table></figure></p>
<h3 id="严格模式_(Strict_Mode)">严格模式 (<code>Strict Mode</code>)</h3><p>严格模式将会发送 <code>Accept</code> 头来代替默认的配置文件中指定的配置。这意味着你将不能通过你的浏览器访问你的 <code>API</code> 。</p>
<p>如果严格模式开启并且 <code>API</code> 应用了有效地 <code>Accept</code> 头，这将会抛出一个未处理的 <code>Symfony\Component\HttpKernel\Exception\BadRequestHttpException</code> ，你应当妥善处理这个异常。</p>
<p>你可以在你的 <code>.env</code> 文件里配置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_STRICT=<span class="keyword">false</span></span><br></pre></td></tr></table></figure></p>
<h3 id="认证提供者(Authentication_Providers)">认证提供者(<code>Authentication Providers</code>)</h3><p>默认只开启 <code>basic</code> 认证。在后面的章节会涉及到更多认证相关的细节。</p>
<p>对于更复杂写的配置，你要添加一个服务提供者或者启动文件。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$app</span>[<span class="string">'Dingo\Api\Auth\Auth'</span>]-&gt;extend(<span class="string">'oauth'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Dingo\Api\Auth\Provider\JWT(<span class="variable">$app</span>[<span class="string">'Tymon\JWTAuth\JWTAuth'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="节流_/_访问频率限制(Throttling_/_Rate_Limiting)">节流 / 访问频率限制(<code>Throttling / Rate Limiting</code>)</h3><p>访问频率限制默认是关闭的。你可以注册自定义的带有频率限制的节流或者使用已经存在的认证状态或者未认证状态的节流。</p>
<p>对于更复杂写的配置，你要添加一个服务提供者或者启动文件。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$app</span>[<span class="string">'Dingo\Api\Http\RateLimit\Handler'</span>]-&gt;extend(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dingo\Api\Http\RateLimit\Throttle\Authenticated;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="响应转换器(Response_Transformer)">响应转换器(<code>Response Transformer</code>)</h3><p><code>Fractal</code> 是默认的相应转换器。</p>
<p>当然，你可以配置你的 <code>.env</code> 文件。对于更复杂写的配置，你要添加一个服务提供者或者启动文件。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$app</span>[<span class="string">'Dingo\Api\Transformer\Factory'</span>]-&gt;setAdapter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$fractal</span> = <span class="keyword">new</span> League\Fractal\Manager;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fractal</span>-&gt;setSerializer(<span class="keyword">new</span> League\Fractal\Serializer\JsonApiSerializer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dingo\Api\Transformer\Adapter\Fractal(<span class="variable">$fractal</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="响应格式(Response_Formats)">响应格式(<code>Response Formats</code>)</h3><p>默认的响应格式是 <code>JSON</code>，<code>JSON</code> 响应格式被注册为默认的响应格式。</p>
<p>你可以在 <code>.env</code> 文件中配置默认的响应格式。更多的响应格式配置需要配置以下内容。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_DEFAULT_FORMAT=json</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dingo\Api\Http\Response::addFormatter(<span class="string">'json'</span>, <span class="keyword">new</span> Dingo\Api\Http\Response\Format\Jsonp);</span><br></pre></td></tr></table></figure>
<h3 id="错误格式(Error_Format)">错误格式(<code>Error Format</code>)</h3><p>当包发生错误的时候，他将会尝试生成一个通用的错误响应，而不是将异常展示给用户。你可以通过自己的喜好来配置错误的格式。</p>
<p>你必须在已发布的配置文件或者引导文件中进行配置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$app</span>[<span class="string">'Dingo\Api\Exception\Handler'</span>]-&gt;setErrorFormat([</span><br><span class="line">    <span class="string">'error'</span> =&gt; [</span><br><span class="line">        <span class="string">'message'</span> =&gt; <span class="string">':message'</span>,</span><br><span class="line">        <span class="string">'errors'</span> =&gt; <span class="string">':errors'</span>,</span><br><span class="line">        <span class="string">'code'</span> =&gt; <span class="string">':code'</span>,</span><br><span class="line">        <span class="string">'status_code'</span> =&gt; <span class="string">':status_code'</span>,</span><br><span class="line">        <span class="string">'debug'</span> =&gt; <span class="string">':debug'</span></span><br><span class="line">    ]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<h3 id="调试模式(Debug_Mode)">调试模式(<code>Debug Mode</code>)</h3><p>如果开启调试模式的话，包处理一般的错误时会显示详细的错误堆栈信息。</p>
<p>你可以配置你的 <code>.env</code> 文件。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API_DEBUG=<span class="keyword">true</span></span><br></pre></td></tr></table></figure></p>
<h2 id="创建_API_端">创建 <code>API</code> 端</h2><hr>
<p>一个端点只是一个路由的另一个术语。当谈到 <code>API</code> 的时候，许多人会把他当做你访问服务端的路由。</p>
<h3 id="版本组">版本组</h3><p>为了避免与你当前应用的路由发生冲突，这个软件工具使用自己独立的路由。所以我们首先要获取 <code>API</code> 路由器的一个实例来创建我们的服务终端。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span> = app(<span class="string">'Dingo\Api\Routing\Router'</span>);</span><br></pre></td></tr></table></figure>
<p>我们现在需要定义一个版本组。这将会允许我们在不同的版本中创建相同的端点。我们需要作如下修改。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果你希望通过一组来响应多个版本，你可以简单地传递版本的数组。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version([<span class="string">'v1'</span>, <span class="string">'v2'</span>], <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>你也可以在你特定的框架中通过传递第二个参数来把这个版本组当做一个标准组。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'foo'</span>], <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>你也可以对某些 <code>API</code> 端嵌套的定义组来进一步定制。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">	<span class="variable">$api</span>-&gt;group([<span class="string">'middleware'</span> =&gt; <span class="string">'foo'</span>], <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="创建终端">创建终端</h3><p>一旦你有了一个版本组，你就可以通过使用带有 <code>$api</code> 的毁掉函数开始创建你的终端。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">	<span class="variable">$api</span>-&gt;get(<span class="string">'users/&#123;id&#125;'</span>, <span class="string">'App\Api\Controllers\UserController@show'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>因为终端是通过每一个版本进行分组的，所以对于相同的终端，你可以使用完全相同的 <code>URI</code> 来创建不同的相应。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'users/&#123;id&#125;'</span>, <span class="string">'App\Api\V1\Controllers\UserController@show'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v2'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'users/&#123;id&#125;'</span>, <span class="string">'App\Api\V2\Controllers\UserController@show'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>你也可以注册资源组和控制器组来使用他们各自的方法。</p>
<blockquote>
<p>注意，对于控制器，你必须制定完整的命名空间，例如:<br><code>App\Http\Controllers</code></p>
</blockquote>
<h3 id="路由命名和生成链接">路由命名和生成链接</h3><p>命名你的路由可以让你更轻松的为他们生成 <code>URL</code>， 在 <code>Laravel</code> 中，你可以使用完全相同的方式来命名你的路由。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;get(<span class="string">'users/&#123;id&#125;'</span>, [<span class="string">'as'</span> =&gt; <span class="string">'users.index'</span>, <span class="string">'uses'</span> =&gt; <span class="string">'Api\V1\UserController@show'</span>]);</span><br></pre></td></tr></table></figure>
<p>你可以对已命名的路由生成 <code>URl</code>。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app(<span class="string">'Dingo\Api\Routing\UrlGenerator'</span>)-&gt;version(<span class="string">'v1'</span>)-&gt;route(<span class="string">'users.index'</span>);</span><br></pre></td></tr></table></figure>
<p>你必须提供一个版本，这样在该版本中你可以基于路由生成链接。现在你可以尝试在多个版本中使用相同的的名字。</p>
<h3 id="控制台中查看路由">控制台中查看路由</h3><p>如果你使用 <code>Laravel 5.1</code>， 你可以通过 <code>Artisan</code> 来注册路由。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan api:routes</span><br></pre></td></tr></table></figure>
<p>这个命令的行为和 <code>Laravel</code> 自带的命令 <code>route:list</code> 一样的。</p>
<h2 id="响应">响应</h2><p>一个运作的 <code>API</code> 是能在接收请求，并且返回一个客户端一个易处理的响应。一个 <code>API</code> 通常会返回一个易于处理的格式，比如 <code>JSON</code>。有很多不同的方法来返回响应，这很大程度上取决你的 <code>API</code> 有多复杂，或者他将会变得多复杂。</p>
<p>最简单的返回一个易处理的响应的方法就是在你的控制器中直接简单地返回一个数组或者对象。并不是每一个对象都可以被正确的格式化，所以你需要确保它实现了 <code>ArrayObject</code> 或者 <code>Illuminate\Support\Contracts\ArrayableInterface</code> 接口。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个案例中，我们的 <code>User</code> 类继承了 <code>Illuminate\Database\Eloquent\Model</code>, 这意味着它可以被格式化成一个数组，所以我们可以简单地返回用户的集合，就是 <code>User:all()</code> 返回的结果。同样你可以用它返回一个用户的信息。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::findOrFail(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>dingo</code> 包会自动的格式化响应为 <code>JSON</code> 格式， 并设置 <code>Content-Type</code> 头为 <code>application/json</code> 。</p>
<h3 id="响应生成器">响应生成器</h3><p>响应生成器提供了一个流畅的接口来让我们更轻松构建一个更加个性化的响应。响应生成器一般和转换器一起使用。</p>
<p>为了利用响应生成器，你的控制器应该添加 <code>use Dingo\Api\Routing\Helpers</code>。为了减少麻烦并在你所有你控制器中添加 <code>trait</code>， 你可以简单地创建一个 基类控制器， 然后你所有的 <code>API</code> 控制器只需要继承它就可以。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Routing</span>\<span class="title">Helpers</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Routing</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Helpers</span>;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">现在你的控制器就可以继承这个基类控制器了。响应生成器可以由你控制器中的 `<span class="variable">$response</span>` 属性来获得。需要注意的是所有以下的方法也可以通过我们更喜欢的 `withX` 来调用。</span><br><span class="line"></span><br><span class="line">&gt; 下面的文档可能会用到转换器，请确保已经了解了转换器这一章节的更多内容。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 数组响应</span></span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = User::findOrFail(<span class="variable">$id</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;array(<span class="variable">$user</span>-&gt;toArray());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一个单独记录的响应">一个单独记录的响应</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = User::findOrFail(<span class="variable">$id</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;item(<span class="variable">$user</span>, <span class="keyword">new</span> UserTransformer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="返回记录集合的响应">返回记录集合的响应</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$users</span> = User::all();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;collection(<span class="variable">$users</span>, <span class="keyword">new</span> UserTransformer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="返回分页的响应">返回分页的响应</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$users</span> = User::paginate(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;paginator(<span class="variable">$users</span>, <span class="keyword">new</span> UserTransformer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="空响应">空响应</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;noContent();</span><br></pre></td></tr></table></figure>
<h3 id="已创建响应">已创建响应</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;created();</span><br></pre></td></tr></table></figure>
<p>你也可以选择性的为已创建的资源提供一个路径作为第一个参数。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;created(<span class="variable">$location</span>);</span><br></pre></td></tr></table></figure>
<h3 id="错误响应">错误响应</h3><p>有很多不同的已创建的错误可以帮助你快速的生成一个错误响应。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A generic error with custom message and status code.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;error(<span class="string">'This is an error.'</span>, <span class="number">404</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// A not found error with an optional message as the first parameter.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;errorNotFound();</span><br><span class="line"></span><br><span class="line"><span class="comment">// A bad request error with an optional message as the first parameter.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;errorBadRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// A forbidden error with an optional message as the first parameter.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;errorForbidden();</span><br><span class="line"></span><br><span class="line"><span class="comment">// An internal error with an optional message as the first parameter.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;errorInternal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// An unauthorized error with an optional message as the first parameter.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;errorUnauthorized();</span><br></pre></td></tr></table></figure>
<h3 id="添加额外的头信息">添加额外的头信息</h3><p>一旦你使用了上面所说的方法，你就可以通过添加额外的头信息进一步的定制响应。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;item(<span class="variable">$user</span>, <span class="keyword">new</span> UserTransformer)-&gt;withHeader(<span class="string">'X-Foo'</span>, <span class="string">'Bar'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="添加_Meta_数据">添加 <code>Meta</code> 数据</h3><p>一些转换层可能会用到 <code>meta</code> 数据。当你需要提供资源相关的额外数据的时候，这是非常有用的。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;item(<span class="variable">$user</span>, <span class="keyword">new</span> UserTransformer)-&gt;addMeta(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br></pre></td></tr></table></figure>
<p>你也可以建立一个 <code>meta</code> 数据的数组来代替链接的调用多个方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;item(<span class="variable">$user</span>, <span class="keyword">new</span> UserTransformer)-&gt;setMeta(<span class="variable">$meta</span>);</span><br></pre></td></tr></table></figure>
<h3 id="设置响应状态">设置响应状态</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;item(<span class="variable">$user</span>, <span class="keyword">new</span> UserTransformer)-&gt;setStatusCode(<span class="number">200</span>);</span><br></pre></td></tr></table></figure>
<h3 id="自定义响应格式">自定义响应格式</h3><p>在配置那一章节中，我们简要的介绍了相应格式。默认情况下，包将自动设置使用 <code>JSON</code> ，并设置适当的 <code>Content-Type</code> 头。除了 <code>JSON</code> 格式外，还有 <code>JSONP</code> 格式。这个格式将响应包装在一个回调里面。你可以在你的 配置文件或者启动文件中通过简单地替换来注册这种格式。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'formats'</span> =&gt; [</span><br><span class="line">    <span class="string">'json'</span> =&gt; <span class="string">'Dingo\Api\Http\Response\Format\Jsonp'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dingo\Api\Http\Response::addFormatter(<span class="string">'json'</span>, <span class="keyword">new</span> Dingo\Api\Http\Response\Format\Jsonp);</span><br></pre></td></tr></table></figure>
<p>默认情况下这个回调函数的参数是一个回调函，这可以通过传递的第一个参数来改变为类构造函数。如果查询字符串不包含一个和你回调函数名字相同的参数，那么将会默认返回一个 <code>JSON</code> 响应。</p>
<p>如果有需要，你也可以注册和使用自己的格式。你的格式应该继承 <code>Dingo\Api\Http\Response\Format\Format</code>。有以下方法应该被定义：<code>formatEloquentModel</code>, <code>formatEloquentCollection</code>, <code>formatArray</code>, <code>getContentType</code>。请查看抽象类来了解每个方法应该做什么，或者看一下已经定义的那些格式的类。</p>
<h3 id="变换和变换时间_(Morphing_And_Morphed_Events)">变换和变换时间 (Morphing And Morphed Events)</h3><p>在此之前，包发送一个相应首先会变换这个相应。这个过程包括运行一些转换器来达到发送一个配置定义的格式的响应。如果你需要更多的关于转换一个响应的操作，你可以使用 <code>ResponseWasMorphed</code> 和 <code>ResponseIsMorphing</code> 事件。</p>
<p>在你的 <code>app/Listeners</code> 目录中为每一个事件创建一个监听者。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Event</span>\<span class="title">ResponseWasMorphed</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPaginationLinksToResponse</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(ResponseWasMorphed <span class="variable">$event</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$event</span>-&gt;content[<span class="string">'meta'</span>][<span class="string">'pagination'</span>])) &#123;</span><br><span class="line">            <span class="variable">$links</span> = <span class="variable">$event</span>-&gt;content[<span class="string">'meta'</span>][<span class="string">'pagination'</span>][<span class="string">'links'</span>];</span><br><span class="line"></span><br><span class="line">            <span class="variable">$event</span>-&gt;response-&gt;headers-&gt;set(</span><br><span class="line">                <span class="string">'link'</span>,</span><br><span class="line">                sprintf(<span class="string">'&lt;%s&gt;; rel="next", &lt;%s&gt;; rel="prev"'</span>, <span class="variable">$links</span>[<span class="string">'links'</span>][<span class="string">'next'</span>], <span class="variable">$links</span>[<span class="string">'links'</span>][<span class="string">'previous'</span>])</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以在 <code>EventServiceProvider</code> 中添加你的事件和监听者。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$listen</span> = [</span><br><span class="line">    <span class="string">'Dingo\Api\Event\ResponseWasMorphed'</span> =&gt; [</span><br><span class="line">        <span class="string">'App\Listeners\AddPaginationLinksToResponse'</span></span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>现在所有包含分页链接的响应也会添加这些链接在 <code>Link</code> 的头信息中。</p>
<blockquote>
<p>请注意，这个代码不适用于生产环境，只是方法的示范。</p>
</blockquote>
<h2 id="错误和错误响应">错误和错误响应</h2><p>构建 <code>API</code> 中处理错误的部分可以说是一大痛处。代替手动创建错误响应的方式是，你可以简单地抛出一个继承了 <code>Symfony\Component\HttpKernel\Exception\HttpException</code> 的异常，这样 <code>API</code> 将会自动的为你处理响应。</p>
<p>这是一个 <code>Symfony</code> 内置的异常列表。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\AccessDeniedHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\BadRequestHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\ConflictHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\GoneHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\HttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\LengthRequiredHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\MethodNotAllowedHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\NotAcceptableHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\NotFoundHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\PreconditionFailedHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\PreconditionRequiredHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\ServiceUnavailableHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\TooManyRequestsHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\UnauthorizedHttpException</span><br><span class="line">Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\UnsupportedMediaTypeHttpException</span><br></pre></td></tr></table></figure>
<p>举例来说，当你尝试去更新一条已经被其他用户更新过的记录的时候，你可能会抛出一个     <code>ConflictHttpException</code> 。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;put(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$id</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = User::find(<span class="variable">$id</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$user</span>-&gt;updated_at &gt; app(<span class="string">'request'</span>)-&gt;get(<span class="string">'last_updated'</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\ConflictHttpException(<span class="string">'User was updated prior to your request.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// No error, we can continue to update the user as per usual.</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这时包将会自动捕获抛出的异常，并将会转换成以 <code>JSON</code> 的方式展现。<code>HTTP</code> 响应的状态码也会变为这个异常的状态码。一个 <code>ConflictHttpException</code> 将会导致一个 <code>HTTP</code> 409 的状态码，如果你没有改变默认的错误格式，那么他将会以 <code>JSON</code> 的格式展现。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"User was updated prior to your request."</span>,</span><br><span class="line">    <span class="string">"status_code"</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="资源异常">资源异常</h3><p>下面是一些常见的资源异常列表。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dingo\Api\<span class="keyword">Exception</span>\DeleteResourceFailedException</span><br><span class="line">Dingo\Api\<span class="keyword">Exception</span>\ResourceException</span><br><span class="line">Dingo\Api\<span class="keyword">Exception</span>\StoreResourceFailedException</span><br><span class="line">Dingo\Api\<span class="keyword">Exception</span>\UpdateResourceFailedException</span><br></pre></td></tr></table></figure>
<p>这些异常是特殊的，因为他们允许你传递在你发布，更新或删除资源时的任何验证错误。</p>
<p>举例来说，你可能会在你试图验证一个新添加用户时遇到错误的时候，抛出一个 <code>StoreResourceFailedException</code>。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;post(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="variable">$rules</span> = [</span><br><span class="line">            <span class="string">'username'</span> =&gt; [<span class="string">'required'</span>, <span class="string">'alpha'</span>],</span><br><span class="line">            <span class="string">'password'</span> =&gt; [<span class="string">'required'</span>, <span class="string">'min:7'</span>]</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$payload</span> = app(<span class="string">'request'</span>)-&gt;only(<span class="string">'username'</span>, <span class="string">'password'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$validator</span> = app(<span class="string">'validator'</span>)-&gt;make(<span class="variable">$payload</span>, <span class="variable">$rules</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$validator</span>-&gt;fails()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Dingo\Api\<span class="keyword">Exception</span>\StoreResourceFailedException(<span class="string">'Could not create new user.'</span>, <span class="variable">$validator</span>-&gt;errors());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create user as per usual.</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这时包将会自动捕获异常并转换为 <code>JSON</code> 方式展现。<code>HTTP</code> 响应的状态码也会随之改变。资源异常会导致一个 <code>HTTP</code> 422 状态码并以 <code>JSON</code> 格式展现。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"Could not create new user."</span>,</span><br><span class="line">    <span class="string">"status_code"</span>: <span class="number">422</span>,</span><br><span class="line">    <span class="string">"errors"</span>: &#123;</span><br><span class="line">        <span class="string">"username"</span>: [</span><br><span class="line">            <span class="string">"The username field is required."</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"password"</span>: [</span><br><span class="line">            <span class="string">"The password field is required."</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义_HTTP_异常">自定义 <code>HTTP</code> 异常</h3><p>你可以创建自己定义的 <code>HTTP</code> 异常，只要他们继承了 <code>Symfony\Component\HttpKernel\Exception\HttpException</code> 或者实现了 <code>Symfony\Component\HttpKernel\Exception\HttpExceptionInterface</code> 接口。</p>
<h3 id="自定义异常响应">自定义异常响应</h3><p>如果你需要自定义异常返回的响应，你可以注册一个自定义的错误处理。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app(<span class="string">'Dingo\Api\Exception\Handler'</span>)-&gt;register(<span class="function"><span class="keyword">function</span> <span class="params">(Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException <span class="variable">$exception</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Response::make([<span class="string">'error'</span> =&gt; <span class="string">'Hey, what do you think you are doing!?'</span>], <span class="number">401</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果验证失败，我们将会得到如下的 <code>JSON</code> 展示。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"error"</span>: <span class="string">"Hey, what do you think you are doing!?"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表单请求">表单请求</h3><p>如果你使用的是表单请求，那么你需要继承 <code>API</code> 表单请求的基类，或者你自己实现它。 <code>API</code> 表单请求的基类将会检查看看传入的请求是不是针对 <code>API</code> 的， 如果是的话，那么如果验证失败，他会抛出一个异常 <code>Dingo\Api\Exception\ValidationHttpException</code>。</p>
<p>这个异常将会被包正确的呈现，并会返回错误响应。</p>
<p>如果你更喜欢实现你自己的表单请求，你必须重载 <code>failedValidation</code> 和 <code>failedAuthorization</code> 方法。这些方法必须抛出一个上面提到的异常，而没有 <code>Laravel</code> 抛出的 <code>HTTP</code> 异常响应。</p>
<h2 id="转换器">转换器</h2><p>转换器可以让你轻松地统一的将对象转换成一个数组。通过一个转换器，你可以转换整形和布尔型变量，也包括分页结果和嵌套关系等。</p>
<h3 id="术语_(Terminology)">术语 (Terminology)</h3><p><code>转换器(transformer)</code> 在本章节中会被大量使用。值得一提的是下列术语在本章节中被用到的含义。</p>
<ul>
<li><code>转换层(transformation layer)</code> 是准备和处理转换器的层。</li>
<li>转换器是一个类，将接受原生数据，并按照设定的格式返回一个数组。转换器是在转换层中工作的。</li>
</ul>
<h3 id="使用转换器">使用转换器</h3><p>有以下几种方法可以使用转换器</p>
<h4 id="将一个类注册生成转换器">将一个类注册生成转换器</h4><p>当你讲一个给定的类注册成转换器的时候，你将可以直接从你的路由中返回那个给定的类(假设它可以被转换成一个数组)，他将会自动的通过转换器的处理。对于简单的 <code>API</code> 来说，这真是极好的。你可以在路由中使用模型(<code>model</code>)直接作为返回值。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app(<span class="string">'Dingo\Api\Transformer\Factory'</span>)-&gt;register(<span class="string">'User'</span>, <span class="string">'UserTransformer'</span>);</span><br></pre></td></tr></table></figure>
<h4 id="使用响应构造器">使用响应构造器</h4><p>请参考 <a href="https://github.com/dingo/api/wiki/Responses#response-builder" target="_blank" rel="external"><code>响应构造器</code></a> 章节。</p>
<h3 id="Fractal">Fractal</h3><p><a href="http://fractal.thephpleague.com/" target="_blank" rel="external"><code>Fractal</code></a> 是包里面默认的转换层。它有很多的功能，可以帮你保持数据的一致。</p>
<p>要使用 <code>Fractal</code> 的话，建议你阅读其官网上的文档。</p>
<h4 id="自动关联关系的贪婪加载">自动关联关系的贪婪加载</h4><p>当你使用 <code>Fractal</code> 的一些包括功能嵌入关系的特性时， 你应该确保它的命名与你模型中的关系名相同。这个包将会自动地贪婪加载他们的关联关系在你的查询结果中。</p>
<h4 id="高级配置">高级配置</h4><p><code>Fractal</code> 被注册为默认的转换层，并带有一些默认的配置。要配置包括键和定义嵌入的关联关系的分隔，你必须在一个服务提供者或启动文件中手动的实例化 <code>Dingo\Api\Transformer\Adapter\Fractal</code>.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;app[<span class="string">'Dingo\Api\Transformer\Factory'</span>]-&gt;setTransformer(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Dingo\Api\Transformer\Adapter\Fractal(<span class="keyword">new</span> League\Fractal\Manager, <span class="string">'include'</span>, <span class="string">','</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果你是用的是 <code>Lumen</code> ， 那么你可以在你的启动文件中这样添加。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app(<span class="string">'Dingo\Api\Transformer\Factory'</span>)-&gt;setTransformer(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dingo\Api\Transformer\Adapter\Fractal(<span class="keyword">new</span> League\Fractal\Manager, <span class="string">'include'</span>, <span class="string">','</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="响应构造器的高级用法">响应构造器的高级用法</h4><p>在控制其中和响应构造器一起使用 <code>Fractal</code> 来返回数据是很不错的方式。</p>
<p>条，集合和分页方法在响应构造器中都接受一些额外的参数，这通常用来定制 <code>Fractal</code>。</p>
<h5 id="资源键">资源键</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;item(<span class="variable">$user</span>, <span class="keyword">new</span> UserTransformer, [<span class="string">'key'</span> =&gt; <span class="string">'user'</span>]);</span><br></pre></td></tr></table></figure>
<h5 id="利用回调">利用回调</h5><p><code>Fractal</code> 转换层允许你注册一个当资源创建后被触发的回调函数。这个回调函数也可以接受一个 <code>League\Fractal\Resource\Item or League\Fractal\Resource\Collection</code> 的实例作为他的第一个参数，<code>League\Fractal\Manager</code> 作为他的第二个参数。然后你可以将它使用在一些更复杂的层面的资源进行交互。</p>
<p>最明显的例子是当你想要为分页数据设置光标执行或是为每一个基础请求改变序列。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;collection(<span class="variable">$users</span>, <span class="keyword">new</span> UserTransformer, [], <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$resource</span>, <span class="variable">$fractal</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$resource</span>-&gt;setCursor(<span class="variable">$cursor</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果你没有使用参数传递资源键，你可以传入一个空的数组，并简单地传递回调作为第三个参数。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;collection(<span class="variable">$users</span>, <span class="keyword">new</span> UserTransformer, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$resource</span>, <span class="variable">$fractal</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$fractal</span>-&gt;setSerializer(<span class="keyword">new</span> CustomSerializer);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="定制转换层">定制转换层</h3><p>你应该需要更多的途径了解你的数据是如何转换的，这样你可以在包中更轻松的实现你的转换层。你需要创建一个类，它实现了 <code>Dingo\Api\Contract\Transformer\Adapter</code> 接口，并需要有 <code>transform</code> 方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Transformer</span>\<span class="title">Binding</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Contract</span>\<span class="title">Transformer</span>\<span class="title">Adapter</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCustomTransformer</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">transform</span><span class="params">(<span class="variable">$response</span>, <span class="variable">$transformer</span>, Binding <span class="variable">$binding</span>, Request <span class="variable">$request</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// Make a call to your transformation layer to transformer the given response.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个 <code>transform</code> 方法是唯一必须的方法，你可以任意添加其他你需要的方法。 <code>transform</code> 方法是为了获得 <code>$response</code>, 然后把它连同 <code>$transformer</code> 给你的转换层。你的转换层应该返回一个 <code>transform</code> 方法返回的一个数组。当然，你可以在这个列中做了所有工作，这样你的转换层会显得非常简单。</p>
<p><code>$binding</code> 参数在你的转换层中的绝大部分特性中非常有用。就像添加一个额外数据或者允许其他的开发者通过回调函数在你的转换层中进行交互。</p>
<p><code>$request</code> 参数是当前被执行的 <code>HTTP</code> 请求，当你的转换层需要查询字符值或其他关联数据时非常有用。</p>
<h2 id="认证">认证</h2><p>大多数的 API 在返回响应之前需要某种形式的认证。在一个请求通过认证和没有通过认证时一个响应可能会有所不同。</p>
<p>这个包允许你配置不同的认证提供者。当请求尝试认证时，每一个被打开的认证提供者都将会被执行。</p>
<h3 id="配置认证提供者">配置认证提供者</h3><p>在配置文件中默认只打开了 HTTP 基础认证。这里有这个包现在支持的认证提供者的一个列表。</p>
<ul>
<li>HTTP Basic (Dingo\Api\Auth\Provider\Basic)</li>
<li>JSON Web Tokens (Dingo\Api\Auth\Provider\JWT)</li>
<li>OAuth 2.0 (Dingo\Api\Auth\Provider\OAuth2)</li>
</ul>
<h3 id="HTTP_Basic">HTTP Basic</h3><p>这个认证提供者是 <code>Laravel</code> 和 <code>Lumen</code> 的默认认证。你需要配置这个提供者在你的一个服务提供者中或者启动文件。第二个参数是用来认证时鉴定的字段。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app(<span class="string">'Dingo\Api\Auth\Auth'</span>)-&gt;extend(<span class="string">'basic'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Dingo\Api\Auth\Provider\Basic(<span class="variable">$app</span>[<span class="string">'auth'</span>], <span class="string">'email'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="JSON_Web_Tokens_(JWT)">JSON Web Tokens (JWT)</h3><p>这个包使用的第三方整合的 <code>JWT</code> 认证。请参考 <a href="https://github.com/tymondesigns/jwt-auth" target="_blank" rel="external"><code>tymon/jwt-auth</code></a> 的 Github 页面来查看更多安装细节和配置。</p>
<p>一旦你使用了这个包，那么你可以在 <code>config/api.php</code> 中配置，或者一个服务提供者亦或是启动文件中。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'jwt'</span> =&gt; <span class="string">'Dingo\Api\Auth\Provider\JWT'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app(<span class="string">'Dingo\Api\Auth\Auth'</span>)-&gt;extend(<span class="string">'jwt'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Dingo\Api\Auth\Provider\JWT(<span class="variable">$app</span>[<span class="string">'Tymon\JWTAuth\JWTAuth'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="OAuth_2-0">OAuth 2.0</h3><p>这个包使用的是第三方整合的 OAuth 2.0. 你一样可以安装 <a href="https://github.com/thephpleague/oauth2-server" target="_blank" rel="external"><code>league/oauth2-server</code></a>，自己配置服务或者使用桥梁包(bridge package)， <a href="https://github.com/lucadegasperi/oauth2-server-laravel" target="_blank" rel="external"><code>lucadegasperi/oauth2-server-laravel</code></a>。</p>
<blockquote>
<p>为了简单起见，本次指南将会假设你使用的是桥梁包(bridge package)。</p>
</blockquote>
<p>一旦你使用了这个包，你可以在一个服务提供者中或者启动文件中配置。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app(<span class="string">'Dingo\Api\Auth\Auth'</span>)-&gt;extend(<span class="string">'oauth'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>)</span> </span>&#123;</span><br><span class="line">   <span class="variable">$provider</span> = <span class="keyword">new</span> Dingo\Api\Auth\Provider\OAuth2(<span class="variable">$app</span>[<span class="string">'oauth2-server.authorizer'</span>]-&gt;getChecker());</span><br><span class="line"></span><br><span class="line">    <span class="variable">$provider</span>-&gt;setUserResolver(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$id</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Logic to return a user by their ID.</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$provider</span>-&gt;setClientResolver(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$id</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Logic to return a client by their ID.</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$provider</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>或者添加到一个服务提供者。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Auth</span>\<span class="title">Auth</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Auth</span>\<span class="title">Provider</span>\<span class="title">OAuth2</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OAuthServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;app[Auth::class]-&gt;extend(<span class="string">'oauth'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$provider</span> = <span class="keyword">new</span> OAuth2(<span class="variable">$app</span>[<span class="string">'oauth2-server.authorizer'</span>]-&gt;getChecker());</span><br><span class="line"></span><br><span class="line">            <span class="variable">$provider</span>-&gt;setUserResolver(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$id</span>)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Logic to return a user by their ID.</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$provider</span>-&gt;setClientResolver(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$id</span>)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Logic to return a client by their ID.</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$provider</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="用户和客户端解释器">用户和客户端解释器</h4><p>根据你开启的认证授权，你可能不需要使用这两个解释器。举例来说，如果你只允许客户端通过 OAuth 2.0 认证，那么你不需要设置一个用户的解释器。</p>
<p>解释器接受用户或者客户端的ID和需要使用这个ID返回一个实例给用户活客户端。这通常体现在为用户或者客户端查询数据库时。</p>
<h3 id="自定义认证提供者">自定义认证提供者</h3><p>如果你正在开发一个遗留的系统或者需要其他形式的认证，你可以实现自己的认证提供者。</p>
<p>你的认证提供者应该实现 <code>Dingo\Api\Contract\Auth\Provider</code> 。 如果认证成功，你的提供者应该返回一个认证通过用户的实例。如果认证失败，应该抛出一个异常 <code>Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</code>.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Routing</span>\<span class="title">Route</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Contract</span>\<span class="title">Auth</span>\<span class="title">Provider</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomProvider</span> <span class="keyword">implements</span> <span class="title">Provider</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">(Request <span class="variable">$request</span>, Route <span class="variable">$route</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// Logic to authenticate the request.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'Unable to authenticate with supplied username and password.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">你的提供者应该继承 `Dingo\Api\Auth\Provider\Authorization` 这个抽象类，你可以在 `Authorization` 头 中发送有用的令牌。`Dingo\Api\Auth\Provider\Authorization::validateAuthorizationHeader` 方法可以使你更简单的认证那些存在认证头和包含有效数值。</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Routing</span>\<span class="title">Route</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Auth</span>\<span class="title">Provider</span>\<span class="title">Authorzation</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">BadRequestHttpException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomProvider</span> <span class="keyword">extends</span> <span class="title">Authorization</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">(Request <span class="variable">$request</span>, Route <span class="variable">$route</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;validateAuthorizationHeader(<span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the authorization header passed validation we can continue to authenticate.</span></span><br><span class="line">        <span class="comment">// If authentication then fails we must throw the UnauthorizedHttpException.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthorizationMethod</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'mac'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦你使用的自己的认证提供者，那你应该在 <code>config/api.php</code> 中配置一下。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'custom'</span> =&gt; <span class="string">'CustomProvider'</span></span><br></pre></td></tr></table></figure>
<p>或者在启动文件亦或是在服务提供者。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app(<span class="string">'Dingo\Api\Auth\Auth'</span>)-&gt;extend(<span class="string">'custom'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CustomProvider;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="受保护端(Protecting_Endpoints)">受保护端(Protecting Endpoints)</h3><p>你可以开启或者关闭保护在路由或者在开启的 <code>api.auth</code> 路由中间件中按等级分组。</p>
<h4 id="在所有路由中开启认证">在所有路由中开启认证</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'api.auth'</span>], <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Routes within this version group will require authentication.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="在部分路由开启认证">在部分路由开启认证</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'user'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'api.auth'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This route requires authentication.</span></span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This route does not require authentication.</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="允许部分特别的认证提供者">允许部分特别的认证提供者</h4><p>如果你希望在一组路由或是某些路由中建立独特的认证提供者，你可以使用 <code>providers</code> 。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'user'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'api.auth'</span>, <span class="string">'providers'</span> =&gt; [<span class="string">'basic'</span>, <span class="string">'oauth'</span>], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This route requires authentication.</span></span><br><span class="line">    &#125;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="在控制器方法中开启认证">在控制器方法中开启认证</h4><p>在 <code>Laravel</code> 和 <code>Lumen</code> 中，在控制器中设置中间件都是有效地。在你的构造方法中，你可以使用 <code>middleware</code> 方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Illuminate</span>\<span class="title">Routing</span>\<span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Helpers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;middleware(<span class="string">'api.auth'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only apply to a subset of methods.</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;middleware(<span class="string">'api.auth'</span>, [<span class="string">'only'</span> =&gt; [<span class="string">'index'</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="取回认证的用户">取回认证的用户</h3><p>在一个受保护端，你可以取回认证的用户。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'api.auth'</span>], <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'user'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = app(<span class="string">'Dingo\Api\Auth\Auth'</span>)-&gt;user();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$user</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果你的控制器使用了 <code>Dingo\Api\Routing\Helpers</code> trait, 那么你可以使用 <code>$auth</code> 属性。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Routing</span>\<span class="title">Helpers</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Routing</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Helpers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;middleware(<span class="string">'api.auth'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable">$this</span>-&gt;auth-&gt;user();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="可选认证">可选认证</h3><p>有时候你可能需要根据请求是否被认证来调整一个响应。为了做到这一点，路由应该不是受保护的。这样你就可以简单地区别认证通过的用户。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'users/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$id</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = User::findOrFail(<span class="variable">$id</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Attempt to authenticate the request. If the request is not authenticated</span></span><br><span class="line">        <span class="comment">// then we'll hide the e-mail from the response. Only authenticated</span></span><br><span class="line">        <span class="comment">// requests can see other users e-mails.</span></span><br><span class="line">        <span class="keyword">if</span> (! app(<span class="string">'Dingo\Api\Auth\Auth'</span>)-&gt;user()) &#123;</span><br><span class="line">            <span class="variable">$hidden</span> = <span class="variable">$user</span>-&gt;getHidden();</span><br><span class="line"></span><br><span class="line">            <span class="variable">$user</span>-&gt;setHidden(array_merge(<span class="variable">$hidden</span>, [<span class="string">'email'</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$user</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="频率限制">频率限制</h2><p>频率限制(节流)允许你限制统一客户端在给定时间内的请求次数。一个限制和其到期时间被定义为节流。这个包中默认有两个节流，一个已认证的节流和一个未认证的节流。</p>
<h3 id="更改频率限制的键">更改频率限制的键</h3><p>频率限制默认情况下限制客户端的 IP 地址。要改别这个默认的行为，你可以注册自己的解释器，它应该返回一个被用于频率限制的字符串。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app(<span class="string">'Dingo\Api\Http\RateLimit\Handler'</span>)-&gt;setRateLimiter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$app</span>, <span class="variable">$request</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$app</span>[<span class="string">'example'</span>]-&gt;getRateLimiterKey();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第一个参数应该是盈通的 IoC 容器，第二个参数已给是频率限制的请求实例。</p>
<h3 id="开启频率限制">开启频率限制</h3><p>要为一个路由或者一组路由开启频率限制，你必须开启 <code>api.throttle</code> 中间件。倪丹频率限制开启了，你必须配置了一些节流或者配置路由具体的限制。</p>
<h4 id="为所有路由开启频率限制">为所有路由开启频率限制</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'api.throttle'</span>], <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Routes within this version group will require authentication.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="为特定的路由开启频率限制">为特定的路由开启频率限制</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'user'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'api.throttle'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This route requires authentication.</span></span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This route does not require authentication.</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="节流具体的路由">节流具体的路由</h3><p>如果你只想为某些路由或者一组路由节流，你可以使用 <code>limit</code> 和 <code>expires</code> 配置你的路由。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'users'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'api.throttle'</span>, <span class="string">'limit'</span> =&gt; <span class="number">100</span>, <span class="string">'expires'</span> =&gt; <span class="number">5</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::all();</span><br><span class="line">    &#125;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这将为这个特定路由建立一个5分钟最多100次请求的限制。如果你将它设置在路由组上，那么其中的每一个路由都会有100得限制。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'api.throttle'</span>, <span class="string">'limit'</span> =&gt; <span class="number">100</span>, <span class="string">'expires'</span> =&gt; <span class="number">5</span>], <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::all();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::all();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>一个用户在每次限制中可以访问 <code>/user</code> 路由和 <code>/posts</code> 路由100次，这个限制不会在应用组中生效，但会在组里每个路由上生效。</p>
<h3 id="定制节流">定制节流</h3><p>在一些你需要满足几个条件的脚本中，你可能需要自定义节流。一个节流必须实现 <code>Dingo\Api\Contract\Http\RateLimit\Throttle</code>, 然而，一个抽象类的存在可以更快的开始。每一个预定义的节流都继承了这个抽象类。</p>
<p>所有的节流都是尝试去匹配一个给定的条件。这个节流应该返回 <code>true</code> 或者 <code>false</code> 取决于他是否匹配条件。举个例子，你可能希望匹配一个通过认证的用户属于一个小组。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Container</span>\<span class="title">Container</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Http</span>\<span class="title">RateLimit</span>\<span class="title">Throttle</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomThrottle</span> <span class="keyword">extends</span> <span class="title">Throttle</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">match</span><span class="params">(Container <span class="variable">$app</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// Perform some logic here and return either true or false depending on whether</span></span><br><span class="line">        <span class="comment">// your conditions matched for the throttle.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后你可以定义你的节流。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'throttling'</span> =&gt; [</span><br><span class="line">    <span class="string">'custom'</span> =&gt; <span class="keyword">new</span> CustomThrottle([<span class="string">'limit'</span> =&gt; <span class="number">200</span>, <span class="string">'expires'</span> =&gt; <span class="number">10</span>])</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>然后再你的 <code>Lumen</code> 启动文件中注册它。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app(<span class="string">'Dingo\Api\Http\RateLimit\Handler'</span>)-&gt;extend(<span class="keyword">new</span> CustomThrottle([<span class="string">'limit'</span> =&gt; <span class="number">200</span>, <span class="string">'expires'</span> =&gt; <span class="number">10</span>]));</span><br></pre></td></tr></table></figure>
<h2 id="内部请求(Internal_Requests)">内部请求(Internal Requests)</h2><p>这个包很大一部分是在 API 内部执行请求。这是你的应用程序可以构建在可消耗的 API 之上。一个内部请求将会返回一个原始数据来代替你获得所有的数据的一个原生相应对象。</p>
<p>为了使用内部请求，我们需要一个分配者的实例。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatcher</span> = app(<span class="string">'Dingo\Api\Dispatcher'</span>);</span><br></pre></td></tr></table></figure>
<p>我们可以使用标准的 <code>HTTP</code> 动词来使用内部请求。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(<span class="variable">$dispatcher</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$users</span> = <span class="variable">$dispatcher</span>-&gt;get(<span class="string">'api/users'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View::make(<span class="string">'index'</span>)-&gt;with(<span class="string">'users'</span>, <span class="variable">$users</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果你的控制器使用了 <code>Dingo\Api\Routing\Helpers</code> trait, 你可以使用 <code>$api</code> 属性来使用内部请求。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Routing</span>\<span class="title">Helpers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Helpers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;api-&gt;get(<span class="string">'users'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'index'</span>)-&gt;with(<span class="string">'users'</span>, <span class="variable">$users</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="带着数据发送">带着数据发送</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatcher</span>-&gt;with([<span class="string">'name'</span> =&gt; <span class="string">'Jason'</span>, <span class="string">'location'</span> =&gt; <span class="string">'Australia'</span>])-&gt;post(<span class="string">'users'</span>);</span><br></pre></td></tr></table></figure>
<p>或者你也可以添加数据作为 <code>post</code> 方法的第二个参数(包括其他的 <code>HTTP</code> 动词，不仅仅是 <code>post</code>)。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatcher</span>-&gt;post(<span class="string">'users'</span>, [<span class="string">'name'</span> =&gt; <span class="string">'Jason'</span>, <span class="string">'location'</span> =&gt; <span class="string">'Australia'</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="针对特定的_API_版本">针对特定的 API 版本</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatcher</span>-&gt;version(<span class="string">'v2'</span>)-&gt;get(<span class="string">'users'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="针对特定的域名">针对特定的域名</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatcher</span>-&gt;on(<span class="string">'api.example.com'</span>)-&gt;get(<span class="string">'users'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="附加上传的文件">附加上传的文件</h3><p>有很多方法可以附加上传的文件。你也可以通过一个 <code>Symfony\Component\HttpFoundation\File\UploadedFile</code> 实例的数组，这对于发送一个附加文件是非常方便的，你只需要上传到你的 <code>API</code>。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatcher</span>-&gt;attach(Input::files())-&gt;post(<span class="string">'photos'</span>);</span><br></pre></td></tr></table></figure>
<p>或者你可以通过文件路径的数组，数组的键应该是文件的标示符。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatcher</span>-&gt;attach([<span class="string">'photo'</span> =&gt; <span class="string">'photos/me.jpg'</span>])-&gt;post(<span class="string">'photos'</span>);</span><br></pre></td></tr></table></figure>
<p>或者你可以通过一个带有文件路径和附加信息的数组。根据不同的情况，这将会更加准确，然后上面包中的方法将不需要知道文件的类型和文件大小。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatcher</span>-&gt;attach([</span><br><span class="line">    <span class="string">'photo'</span> =&gt; [</span><br><span class="line">        <span class="string">'path'</span> =&gt; <span class="string">'photos/me.jpg'</span>,</span><br><span class="line">        <span class="string">'mime'</span> =&gt; <span class="string">'image/jpeg'</span>,</span><br><span class="line">        <span class="string">'size'</span> =&gt; <span class="string">'49430'</span></span><br><span class="line">    ]</span><br><span class="line">])-&gt;post(<span class="string">'photos'</span>);</span><br></pre></td></tr></table></figure>
<p>如果你需要的话，你也可以组合使用上面的方法。</p>
<h3 id="发送_JSON_数据">发送 <code>JSON</code> 数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span> = [<span class="string">'name'</span> =&gt; <span class="string">'bill'</span>, <span class="string">'password'</span> =&gt; <span class="number">12345</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$dispatcher</span>-&gt;json(<span class="variable">$data</span>)-&gt;post(<span class="string">'users'</span>);</span><br></pre></td></tr></table></figure>
<p>如果 <code>$data</code> 是一个数组，他将会自动被转换成<code>json</code>。 请求的 <code>Content-Type</code> 将会被设置成 <code>application/json</code>。</p>
<h3 id="冒充认证通过的用户">冒充认证通过的用户</h3><p>如果你的 API 中的一些端需要认证，你可以内部冒充一个给定的用户。比如，如果一个用户使用 Laravel 的认证登录进你的应用，你可以取出登录后的用户，并在执行内部请求的时候冒充这个用户。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatcher</span>-&gt;be(auth()-&gt;user())-&gt;get(<span class="string">'posts'</span>);</span><br></pre></td></tr></table></figure>
<p>人后后续的请求都会以相同的用户通过认证。如果只在一次请求中认证用户，你可以使用 <code>once</code> 方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dispatcher</span>-&gt;be(auth()-&gt;user())-&gt;once()-&gt;get(<span class="string">'posts'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="取回原始响应对象">取回原始响应对象</h3><p>所有内部请求返回的是预先转换和预先格式化后的数据。比如，如果你的 API 从一个端返回一个 Eloquent 集合，你将会接收到 Eloquent 集合内部数据。如果你希望获得原生的相应对象，你只需要在所有调用前添加 <code>raw</code>。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$response</span> = <span class="variable">$dispatcher</span>-&gt;raw()-&gt;get(<span class="string">'users'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="处理异常">处理异常</h3><p>在你的后端，当执行内部请求时，任何异常的抛出都会被重新抛出为你手动捕获的。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\ConflictHttpException(<span class="string">'We got a conflict!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们在内部调用上面的程序，那么我们就需要捕获异常抛出。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    app(<span class="string">'Dingo\Api\Dispatcher'</span>)-&gt;with(<span class="variable">$payload</span>)-&gt;post(<span class="string">'users'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Symfony\Component\HttpKernel\<span class="keyword">Exception</span>\ConflictHttpException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something here, like return with an error.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当一个错误响应返回时，这个包也会抛出一个 <code>Dingo\Api\Exception\InternalHttpException</code>。如果你是用响应构造器类返回错误，那么你需要补货这个抛出的异常。在异常中，响应是有效地。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;response-&gt;errorNotFound(<span class="string">'Could not find the user.'</span>);</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">党内不调用这个端点，我们需要补货这个异常。</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    app(<span class="string">'Dingo\Api\Dispatcher'</span>)-&gt;get(<span class="string">'users/1'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Dingo\Api\<span class="keyword">Exception</span>\InternalHttpException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// We can get the response here to check the status code of the error or response body.</span></span><br><span class="line">    <span class="variable">$response</span> = <span class="variable">$e</span>-&gt;getResponse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OAuth_2-0-1">OAuth 2.0</h2><p>如何配置 OAuth 2.0 提供者, 请参考 <a href="https://github.com/dingo/api/wiki/Authentication" target="_blank" rel="external">Authentication</a> 章节。</p>
<h3 id="定义路由作用域">定义路由作用域</h3><p>通过使用作用域，你可以更多的控制谁可以访问你的后端。这个范围可以设置在一组或者一个路由上,就像一个管道字符串的数组。</p>
<h4 id="路由组范围">路由组范围</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'api.auth'</span>, <span class="string">'scopes'</span> =&gt; [<span class="string">'read_user_data'</span>, <span class="string">'write_user_data'</span>]], <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Only access tokens with the "read_user_data" scope will be given access.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="特定路由范围">特定路由范围</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span>-&gt;version(<span class="string">'v1'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'api.auth'</span>], <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$api</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$api</span>-&gt;get(<span class="string">'user'</span>, [<span class="string">'scopes'</span> =&gt; <span class="string">'read_user_data'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Only access tokens with the "read_user_data" scope will be given access.</span></span><br><span class="line">    &#125;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="控制器范围">控制器范围</h3><p>如果你的控制器使用了 <code>Dingo\Api\Routing\Helpers</code> trait， 你可以使用 <code>scopes</code> 方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Routing</span>\<span class="title">Helpers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Helpers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;scopes(<span class="string">'read_user_data'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以定义你想要 <code>scope</code> 使用的方法作为第二个参数，无论是一个管道分隔字符串还是一个数组。你也可以不提供方法，那么范围将适用于所有方法。你可以使用 <code>except</code> 和 <code>only</code> 数组作为键名，来进一步设置方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Routing</span>\<span class="title">Helpers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Helpers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// Only apply to the index method.</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;scopes(<span class="string">'read_user_data'</span>, <span class="string">'index'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Apply to every method except the store method.</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;scopes(<span class="string">'read_user_data'</span>, [<span class="string">'except'</span> =&gt; <span class="string">'store'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Apply only to the store method.</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;scopes(<span class="string">'write_user_data'</span>, [<span class="string">'only'</span> =&gt; [<span class="string">'store'</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="向你的_API_发送请求">向你的 API 发送请求</h2><p>向你的 API 发送请求是非常简单的。最好的方法就是使用 <a href="http://www.getpostman.com/" target="_blank" rel="external"><code>Postman</code></a> 之类的工具。</p>
<p>由于我们在 URI 中没有 API 版本，所以我们需要定义一个 Accept 头来请求一个特定的版本。这个头的格式应该这样。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept: application/vnd.YOUR_SUBTYPE.v1+json</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，你需要用你在配置中定义的亚型名称代替 <code>YOUR_SUBTYPE</code>。重要的是，你通常是你应用中唯一的，就像名字或者身份标识符一样，并且他们通常全部小写。</p>
<blockquote>
<p>需要记住的是如果你使用了一个不同的标准书，就像 <code>x</code>, 你应该用 <code>vnd</code> 代替 <code>x</code>。</p>
</blockquote>
<p>根据亚型的名字，我们得到了我们想要的版本。在上面的例子中，我们请求 <code>v1</code> 在我们的 API 中。随后的是一个加号和所需的格式。如果这个格式在包中是无效的，那么将会使用在配置中定义的默认格式。</p>
<p>如果你不向往使用 Postmac， 你可以使用命令行工具，比如 cURL。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v -H &#34;Accept: application/vnd.YOUR_SUBTYPE.v1+json&#34; http://example.app/users</span><br></pre></td></tr></table></figure>
<p>如果你开启了严格模式，然后你传入了一个无效的 <code>Accept</code> 头，一个未处理的 <code>Symfony\Component\HttpKernel\Exception\BadRequestHttpException</code> 异常将会被抛出。</p>
<h2 id="API_蓝图文档">API 蓝图文档</h2><p>文档化你的 API 对于一个 API 是非常重要的。为了帮助你文档化更轻松些，这个包允许你通过注释你的 API 控制器，然后使用 Artisan 命令行工具生成文档。</p>
<h3 id="Artisan_命令">Artisan 命令</h3><p>你可以使用 <code>api:docs</code> 命令来生成文档。这个命令需要两个参数，文档的名字和生成的版本号。</p>
<p>更多使用的细节可以参考 <a href="https://github.com/dingo/api/wiki/Commands#apidocs" target="_blank" rel="external"><code>Commands</code></a> 章节。</p>
<h3 id="资源">资源</h3><p>控制器通常可以表示为一个资源。资源可以表示为包含很多以 HTTP 动词命名的行为。</p>
<p>为了定义一个资源，我们可以使用 <code>@Resource</code> 注释。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@Resource</span>("Users")</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个参数可以是资源的标示符或者是它的名字。我们也可以给定一个基础 URI 。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@Resource</span>("Users", uri="/users")</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你也可以在注释的前面协商一段描述。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * User resource representation.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@Resource</span>("Users", uri="/users")</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Actions">Actions</h3><p>一个行为可以被表示为控制器中的一个路由方法。</p>
<p>你可以在 PHPDoc 中用一段语言来描述你的行为。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Show all users</span><br><span class="line"> *</span><br><span class="line"> * Get a JSON representation of all the registered users.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Get</code>, <code>@Post</code>, <code>@Put</code>, <code>@Patch</code>, <code>@Delete</code></p>
<p>每一个行为可以用一个 HTTP 动词表示。你必须提供一个 URI 作为注释的第一个参数。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Show all users</span><br><span class="line"> *</span><br><span class="line"> * Get a JSON representation of all the registered users.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@Get</span>("/")</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Versions</code></p>
<p>一个行为可以再多个 API 版本中生效。当你要生成文档时，这个注释将确定那些行为将会被包含。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Show all users</span><br><span class="line"> *</span><br><span class="line"> * Get a JSON representation of all the registered users.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@Get</span>("/")</span><br><span class="line"> * <span class="doctag">@Versions</span>(&#123;"v1"&#125;)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Request</code></p>
<p>一个行为应该定义一个请求，可以被执行并能返回一个成功或者是白的响应。</p>
<p>一个请求应该包含一个主体。根据请求的类型，主体将会变化。对于 <code>POST</code> 请求，你应该使用一个字符串，然而你也需要设置它的内容类型。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Register user</span><br><span class="line"> *</span><br><span class="line"> * Register a new user with a `username` and `password`.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@Post</span>("/")</span><br><span class="line"> * <span class="doctag">@Versions</span>(&#123;"v1"&#125;)</span><br><span class="line"> * <span class="doctag">@Request</span>("username=foo&amp;password=bar", contentType="application/x-www-form-urlencoded")</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你发送 JSON,你可以使用注释数组，他会自动的转换成 JSON 字符串。内容类型将会默认为 <code>application/json</code>。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Register user</span><br><span class="line"> *</span><br><span class="line"> * Register a new user with a `username` and `password`.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@Post</span>("/")</span><br><span class="line"> * <span class="doctag">@Versions</span>(&#123;"v1"&#125;)</span><br><span class="line"> * <span class="doctag">@Request</span>(&#123;"username": "foo", "password": "bar"&#125;)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你也可以包含额外的头信息。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Register user</span><br><span class="line"> *</span><br><span class="line"> * Register a new user with a `username` and `password`.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@Post</span>("/")</span><br><span class="line"> * <span class="doctag">@Versions</span>(&#123;"v1"&#125;)</span><br><span class="line"> * <span class="doctag">@Request</span>(&#123;"username": "foo", "password": "bar"&#125;, headers=&#123;"X-Custom": "FooBar"&#125;)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你的行为根据不同的请求而响应不同，你可以认证请求。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Register user</span><br><span class="line"> *</span><br><span class="line"> * Register a new user with a `username` and `password`.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@Post</span>("/")</span><br><span class="line"> * <span class="doctag">@Versions</span>(&#123;"v1"&#125;)</span><br><span class="line"> * <span class="doctag">@Request</span>(&#123;"username": "foo", "password": "bar"&#125;, identifier="A")</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Response</code></p>
<p>一个 <code>@Request</code> 应该永远跟着一个 <code>@Response</code>, 他定义了状态码和内容类型，主体和头信息。</p>
<p>就像一个请求一样，响应的主体可以使字符串(请确保更改了内容类型)或者将会被转换成 JSON 的注释数组。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Register user</span><br><span class="line"> *</span><br><span class="line"> * Register a new user with a `username` and `password`.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@Post</span>("/")</span><br><span class="line"> * <span class="doctag">@Versions</span>(&#123;"v1"&#125;)</span><br><span class="line"> * <span class="doctag">@Request</span>(&#123;"username": "foo", "password": "bar"&#125;)</span><br><span class="line"> * <span class="doctag">@Response</span>(200, body=&#123;"id": 10, "username": "foo"&#125;)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就像一个请求一样，你也可以包含头信息。</p>
<p><strong><em>未完待续。。。</em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="dingo/api_wiki_(未校正)"><a href="https://github.com/dingo/api/wiki" target="_blank" rel="external">dingo/api wiki</a> (未校正)</h1><hr>
<]]>
    </summary>
    
      <category term="api" scheme="http://nidesky.github.io/tags/api/"/>
    
      <category term="dingo" scheme="http://nidesky.github.io/tags/dingo/"/>
    
      <category term="laravel" scheme="http://nidesky.github.io/tags/laravel/"/>
    
      <category term="translation" scheme="http://nidesky.github.io/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面向对象的5个基本设计原则]]></title>
    <link href="http://nidesky.github.io/2015/09/05/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%845%E4%B8%AA%E5%9F%BA%E6%9C%AC%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://nidesky.github.io/2015/09/05/面向对象的5个基本设计原则/</id>
    <published>2015-09-04T16:54:22.000Z</published>
    <updated>2015-09-04T17:18:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="面向对象设计的5项基本原则">面向对象设计的5项基本原则</h1><hr>
<blockquote>
<p>原文出处： <a href="http://blog.csdn.net/luxiaoxun/article/details/8041885" target="_blank" rel="external">面向对象的5个基本设计原则</a></p>
</blockquote>
<h2 id="单一职责原则（Single-Resposibility_Principle）">单一职责原则（Single-Resposibility Principle）</h2><p>其核心思想为：一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而大大损伤其内聚性和耦合度。通常意义下的单一职责，就是指只有一种单一功能，不要为类实现过多的功能点，以保证实体只有一个引起它变化的原因。</p>
<p>专注，是一个人优良的品质；同样的，单一也是一个类的优良设计。交杂不清的职责将使得代码看起来特别别扭牵一发而动全身，有失美感和必然导致丑陋的系统错误风险。</p>
<h2 id="开放封闭原则（Open-Closed_principle）">开放封闭原则（Open-Closed principle）</h2><p>其核心思想是：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。开放封闭原则主要体现在两个方面：</p>
<ol>
<li>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</li>
<li>对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对其进行任何尝试的修改。</li>
</ol>
<p>实现开开放封闭原则的核心思想就是对抽象编程，而不对具体编程，因为抽象相对稳定。让类依赖于固定的抽象，所以修改就是封闭的；而通过面向对象的继承和多态机制，又可以实现对抽象类的继承，通过覆写其方法来改变固有行为，实现新的拓展方法，所以就是开放的。<br>    “需求总是变化”没有不变的软件，所以就需要用封闭开放原则来封闭变化满足需求，同时还能保持软件内部的封装体系稳定，不被需求的变化影响。</p>
<h2 id="李氏替换原则（Liskov-Substituion_Principle）">李氏替换原则（Liskov-Substituion Principle）</h2><p>其核心思想是：子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。在父类和子类的具体行为中，必须严格把握继承层次中的关系和特征，将基类替换为子类，程序的行为不会发生任何变化。同时，这一约束反过来则是不成立的，子类可以替换基类，但是基类不一定能替换子类。</p>
<p>Liskov替换原则，主要着眼于对抽象和多态建立在继承的基础上，因此只有遵循了Liskov替换原则，才能保证继承复用是可靠地。实现的方法是面向接口编程：将公共部分抽象为基类接口或抽象类，通过Extract Abstract Class，在子类中通过覆写父类的方法实现新的方式支持同样的职责。</p>
<p>Liskov替换原则是关于继承机制的设计原则，违反了Liskov替换原则就必然导致违反开放封闭原则。</p>
<p>Liskov替换原则能够保证系统具有良好的拓展性，同时实现基于多态的抽象机制，能够减少代码冗余，避免运行期的类型判别。</p>
<h2 id="依赖倒置原则（Dependecy-Inversion_Principle）">依赖倒置原则（Dependecy-Inversion Principle）</h2><p>其核心思想是：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。</p>
<p>我们知道，依赖一定会存在于类与类、模块与模块之间。当两个模块之间存在紧密的耦合关系时，最好的方法就是分离接口和实现：在依赖之间定义一个抽象的接口使得高层模块调用接口，而底层模块实现接口的定义，以此来有效控制耦合关系，达到依赖于抽象的设计目标。</p>
<p>抽象的稳定性决定了系统的稳定性，因为抽象是不变的，依赖于抽象是面向对象设计的精髓，也是依赖倒置原则的核心。</p>
<p>依赖于抽象是一个通用的原则，而某些时候依赖于细节则是在所难免的，必须权衡在抽象和具体之间的取舍，方法不是一层不变的。依赖于抽象，就是对接口编程，不要对实现编程。</p>
<h2 id="接口隔离原则（Interface-Segregation_Principle）">接口隔离原则（Interface-Segregation Principle）</h2><p>其核心思想是：使用多个小的专门的接口，而不要使用一个大的总接口。</p>
<p>具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染。</p>
<p>接口有效地将细节和抽象隔离，体现了对抽象编程的一切好处，接口隔离强调接口的单一性。而胖接口存在明显的弊端，会导致实现的类型必须完全实现接口的所有方法、属性等；而某些时候，实现类型并非需要所有的接口定义，在设计上这是“浪费”，而且在实施上这会带来潜在的问题，对胖接口的修改将导致一连串的客户端程序需要修改，有时候这是一种灾难。在这种情况下，将胖接口分解为多个特点的定制化方法，使得客户端仅仅依赖于它们的实际调用的方法，从而解除了客户端不会依赖于它们不用的方法。</p>
<p>分离的手段主要有以下两种：</p>
<ol>
<li>委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。</li>
<li>多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="面向对象设计的5项基本原则">面向对象设计的5项基本原则</h1><hr>
<blockquote>
<p>原文出处： <a href="http://blog.csdn.net/luxiaoxun/article/details/8041885" target=]]>
    </summary>
    
      <category term="OOP" scheme="http://nidesky.github.io/tags/OOP/"/>
    
      <category term="设计模式" scheme="http://nidesky.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[更新node和npm版本]]></title>
    <link href="http://nidesky.github.io/2015/08/31/%E6%9B%B4%E6%96%B0node%E5%92%8Cnpm%E7%89%88%E6%9C%AC/"/>
    <id>http://nidesky.github.io/2015/08/31/更新node和npm版本/</id>
    <published>2015-08-31T09:16:58.000Z</published>
    <updated>2015-08-31T09:22:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="更新_Npm_版本">更新 Npm 版本</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install npm -g</span><br></pre></td></tr></table></figure>
<h2 id="更新_Node_版本">更新 Node 版本</h2><h3 id="安装_n_模块">安装 n 模块</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g n</span><br></pre></td></tr></table></figure>
<h3 id="升级_nodejs">升级 nodejs</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#21319;&#32423; Nodejs &#21040;&#26368;&#26032;&#29256;&#26412;&#10;n stable&#10;&#10;# n &#21518;&#38754;&#20063;&#21487;&#20197;&#36319;&#38543;&#29256;&#26412;&#21495;&#65306;&#10;n v0.10.26&#10;&#10;# &#25110;&#10;v 0.10.26</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="更新_Npm_版本">更新 Npm 版本</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td ]]>
    </summary>
    
      <category term="node" scheme="http://nidesky.github.io/tags/node/"/>
    
      <category term="npm" scheme="http://nidesky.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Frameworks Are Not Tools]]></title>
    <link href="http://nidesky.github.io/2015/08/30/Frameworks-Are-Not-Tools/"/>
    <id>http://nidesky.github.io/2015/08/30/Frameworks-Are-Not-Tools/</id>
    <published>2015-08-30T14:18:46.000Z</published>
    <updated>2015-08-30T15:13:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="框架不是工具">框架不是工具</h1><blockquote>
<p>翻译自 <a href="http://paul-m-jones.com/archives/6175" target="_blank" rel="external">Frameworks Are Not Tools</a></p>
<p>Author <a href="http://paul-m-jones.com/" target="_blank" rel="external">@pmjones</a></p>
</blockquote>
<hr>
<p>我的一个朋友很久之前问我，为什么那些玩抢的伙计们对枪支非常痴迷。”他们只是工具”, 他说, “对我而言，我的工具则是一种超然的兴趣, 就像我做饭用的刀, 或者是在花园中使用的工具， 但他们不是我无休止比较和讨论的对象”。</p>
<p>我的回答是, 一支手枪或步枪，或者其他任何的现代武器, 或许并不只是个工具。它是一个机器。它是由所有协同工作的，相互关联相互依赖的活动部件组成的。（此外, 他是有炸药驱动的, 这使得他更有趣。）</p>
<p>我的朋友因此得到了一个结论。工具并不特别让人着迷，是因为它们并不复杂。但是机器最吸引人的地方就是它们是复杂的。</p>
<p>考虑到这点，我们必须认识到，框架并不是工具。框架是一个机器。每个人的代码都对应着相互关联相互依赖的活动部件。而机器吸引人的原因也就是框架吸引人的原因。</p>
<p>因此，下次有人说”要在工作中使用正确的工具”，并且提到了一个框架，我们可以认为这个提出使用框架建议的人可能并没有考虑到使用框架的正确方法。事实上，他们可能非常周全的考虑了某些方面，只是将”框架”作为他们所考虑的事情的一个简称。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="框架不是工具">框架不是工具</h1><blockquote>
<p>翻译自 <a href="http://paul-m-jones.com/archives/6175" target="_blank" rel="external">Frameworks Are]]>
    </summary>
    
      <category term="translation" scheme="http://nidesky.github.io/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[phpstorm 去除顶部的面包屑导航]]></title>
    <link href="http://nidesky.github.io/2015/08/30/phpstorm-%E5%8E%BB%E9%99%A4%E9%A1%B6%E9%83%A8%E7%9A%84%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA/"/>
    <id>http://nidesky.github.io/2015/08/30/phpstorm-去除顶部的面包屑导航/</id>
    <published>2015-08-30T10:37:38.000Z</published>
    <updated>2015-08-30T10:46:20.000Z</updated>
    <content type="html"><![CDATA[<p>用 <code>PHPStorm</code> 的时候，发现顶部的导航条实在是太别扭：</p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-4.png" alt=""></p>
<p>找了好久没有找到怎么去除掉这个面包屑导航，去 <code>Stackoverflow</code> 上逛一逛，一不小心就看见了。</p>
<p><code>Preferences -&gt; Editor -&gt; General -&gt; Appearance</code></p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-5.png" alt=""></p>
<h1 id="记得要重启项目才能生效">记得要重启项目才能生效</h1>]]></content>
    <summary type="html">
    <![CDATA[<p>用 <code>PHPStorm</code> 的时候，发现顶部的导航条实在是太别扭：</p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-4.png" alt=""></p>
<p>找了好久没]]>
    </summary>
    
      <category term="phpstorm" scheme="http://nidesky.github.io/tags/phpstorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[phpstorm 改变tabs 上文件名的颜色]]></title>
    <link href="http://nidesky.github.io/2015/08/30/phpstorm-%E6%94%B9%E5%8F%98tabs-%E4%B8%8A%E6%96%87%E4%BB%B6%E5%90%8D%E7%9A%84%E9%A2%9C%E8%89%B2/"/>
    <id>http://nidesky.github.io/2015/08/30/phpstorm-改变tabs-上文件名的颜色/</id>
    <published>2015-08-30T09:49:39.000Z</published>
    <updated>2015-08-30T10:01:00.000Z</updated>
    <content type="html"><![CDATA[<p>今天遇到了一个问题， 就是 <code>PHPStorm</code> 上的标签颜色太暗了：</p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-2.png" alt=""></p>
<p>然后找配置找了半天也没有发现，到 <code>Stackoverflow</code> 上一下就找到了:</p>
<p><code>Settings &gt; IDE Settings &gt; Editor &gt; Colors &amp; Fonts &gt; File Status.</code></p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-3.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天遇到了一个问题， 就是 <code>PHPStorm</code> 上的标签颜色太暗了：</p>
<p><img src="http://7oxep2.com1.z0.glb.clouddn.com/QQ20150830-2.png" alt=""></p>
<p>然后]]>
    </summary>
    
      <category term="phpstorm" scheme="http://nidesky.github.io/tags/phpstorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[gulp-run clear 报错]]></title>
    <link href="http://nidesky.github.io/2015/08/30/gulp-run-clear-%E6%8A%A5%E9%94%99/"/>
    <id>http://nidesky.github.io/2015/08/30/gulp-run-clear-报错/</id>
    <published>2015-08-29T17:05:49.000Z</published>
    <updated>2015-08-29T17:07:28.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>引用地址 <a href="https://gist.github.com/laracasts/52a9f085408605a06400" target="_blank" rel="external">https://gist.github.com/laracasts/52a9f085408605a06400</a></p>
</blockquote>
<h3 id="1-_问题代码">1. 问题代码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&#39;gulp&#39;);&#10;var phpspec = require(&#39;gulp-phpspec&#39;);&#10;var run = require(&#39;gulp-run&#39;);&#10;var notify = require(&#39;gulp-notify&#39;);&#10;&#10;gulp.task(&#39;test&#39;, function() &#123;&#10;   gulp.src(&#39;spec/**/*.php&#39;)&#10;       .pipe(run(&#39;clear&#39;))&#10;       .pipe(phpspec(&#39;&#39;, &#123; notify: true &#125;))&#10;       .on(&#39;error&#39;, notify.onError(&#123;&#10;           title: &#39;Dangit&#39;,&#10;           message: &#39;Your tests failed!&#39;,&#10;           icon: __dirname + &#39;/fail.png&#39;&#10;       &#125;))&#10;       .pipe(notify(&#123;&#10;           title: &#39;Success&#39;,&#10;           message: &#39;All tests have returned green!&#39;&#10;       &#125;));&#10;&#125;);&#10;&#10;gulp.task(&#39;watch&#39;, function() &#123;&#10;   gulp.watch([&#39;spec/**/*.php&#39;, &#39;src/**/*.php&#39;], [&#39;test&#39;]);&#10;&#125;);&#10;&#10;gulp.task(&#39;default&#39;, [&#39;test&#39;, &#39;watch&#39;]);</span><br></pre></td></tr></table></figure>
<h3 id="2-_问题重现">2. 问题重现</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">events.js:85&#10;      throw er; // Unhandled &#39;error&#39; event&#10;            ^&#10;Error: write EPIPE&#10;    at exports._errnoException (util.js:746:11)&#10;    at WriteWrap.afterWrite (net.js:775:14)</span><br></pre></td></tr></table></figure>
<h3 id="3-_解决方案">3. 解决方案</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Change line 8 for this:&#10;.pipe(run(&#39;clear&#39;).exec())</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>引用地址 <a href="https://gist.github.com/laracasts/52a9f085408605a06400" target="_blank" rel="external">https://gist.github.com]]>
    </summary>
    
      <category term="gulp" scheme="http://nidesky.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laravel 5.1 开发扩展包]]></title>
    <link href="http://nidesky.github.io/2015/08/30/Laravel-5-1-%E5%BC%80%E5%8F%91%E6%89%A9%E5%B1%95%E5%8C%85/"/>
    <id>http://nidesky.github.io/2015/08/30/Laravel-5-1-开发扩展包/</id>
    <published>2015-08-29T16:58:11.000Z</published>
    <updated>2015-08-29T17:03:43.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_安装_pingpong/workbench">1. 安装 <code>pingpong/workbench</code></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require pingpong/workbench</span><br></pre></td></tr></table></figure>
<h3 id="2-_配置_pingpong/workbench">2. 配置 <code>pingpong/workbench</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 config/app.php 中的 providers 添加</span></span><br><span class="line">Pingpong\Workbench\WorkbenchServiceProvider</span><br></pre></td></tr></table></figure>
<p>运行命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish</span><br></pre></td></tr></table></figure></p>
<h3 id="3-_创建扩展包">3. 创建扩展包</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan workbench vendor/package&#10;php artisan workbench vendor/package --resources&#10;// php artisan workbench nidesky/sweet-alert</span><br></pre></td></tr></table></figure>
<h3 id="4-_引入命名空间">4. 引入命名空间</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"autoload"</span>: &#123;</span><br><span class="line">    <span class="string">"classmap"</span>: [</span><br><span class="line">        <span class="string">"database"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"psr-4"</span>: &#123;</span><br><span class="line">        <span class="string">"App\\"</span>: <span class="string">"app/"</span>,</span><br><span class="line">+       <span class="string">"Nidesky\\SweetAlert\\"</span>: <span class="string">"workbench/nidesky/sweet-alert/src/Nidesky/SweetAlert"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_安装_pingpong/workbench">1. 安装 <code>pingpong/workbench</code></h3><figure class="highlight"><table><tr><td class="gutter"><pre><sp]]>
    </summary>
    
      <category term="laravel" scheme="http://nidesky.github.io/tags/laravel/"/>
    
      <category term="packages" scheme="http://nidesky.github.io/tags/packages/"/>
    
      <category term="php" scheme="http://nidesky.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Centos 防火墙iptables 开启 3306端口]]></title>
    <link href="http://nidesky.github.io/2015/08/29/Centos-%E9%98%B2%E7%81%AB%E5%A2%99iptables-%E5%BC%80%E5%90%AF-3306%E7%AB%AF%E5%8F%A3/"/>
    <id>http://nidesky.github.io/2015/08/29/Centos-防火墙iptables-开启-3306端口/</id>
    <published>2015-08-29T15:38:06.000Z</published>
    <updated>2015-08-29T15:39:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_添加防火墙规则">1. 添加防火墙规则</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables&#10;&#10;# &#28155;&#21152;&#19979;&#38754;&#36825;&#34892;&#10;-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="2-_重启防火墙">2. 重启防火墙</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_添加防火墙规则">1. 添加防火墙规则</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><t]]>
    </summary>
    
  </entry>
  
</feed>
